{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#python-from-absolute-beginner-to-expert","title":"Python: From Absolute Beginner to Expert","text":""},{"location":"#a-crashcourse-into-python-for-network-engineers","title":"A Crashcourse into Python for Network Engineers","text":""},{"location":"#absolute-beginner-the-basics","title":"Absolute Beginner (The Basics)","text":"<ul> <li>A. Python Syntax &amp; Basics<ul> <li>[[A1. My first Python application]]</li> <li>[[A2. Variable Scopes]]</li> <li>[[A3. Understanding indentation, comments, and PEP 8 style guide]]</li> </ul> </li> <li>B. Data Types &amp; Variables<ul> <li>[[B1. Integers, floats, strings, booleans]]</li> <li>Type conversion (<code>int()</code>, <code>str()</code>, <code>float()</code>, <code>bool()</code>)</li> </ul> </li> <li>C. Operators<ul> <li>Arithmetic (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>)</li> <li>Comparison (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>)</li> <li>Logical (<code>and</code>, <code>or</code>, <code>not</code>)</li> </ul> </li> <li>D. Control Flow<ul> <li><code>if</code>, <code>elif</code>, <code>else</code> statements</li> <li>Loops: <code>for</code>, <code>while</code></li> <li><code>break</code>, <code>continue</code>, <code>pass</code></li> </ul> </li> <li>E. Functions<ul> <li>Defining functions (<code>def my_function()</code>)</li> <li>Function arguments and return values</li> <li>Default parameters, keyword arguments</li> <li>Forcing function calls to use args or kwargs: <code>*</code>,<code>/</code> </li> </ul> </li> <li>F. Basic Data Structures<ul> <li>Lists (<code>list.append()</code>, <code>list.pop()</code>, slicing)</li> <li>Tuples (immutable sequences)</li> <li>Dictionaries (<code>dict.keys()</code>, <code>dict.values()</code>)</li> <li>Sets (<code>set.add()</code>, <code>set.remove()</code>)</li> </ul> </li> </ul>"},{"location":"#final-chapter-exercises","title":"Final Chapter Exercises","text":"<ul> <li> <p>Create a function that accepts an IP address and returns the numerical (base-10) value as a single integer.</p> </li> <li> <p>Create a function that takes an IP address and returns the class of IP address (i.e. A, B, C etc.)</p> <ul> <li>Hint: you can use the function you previously created above as an aid.</li> </ul> </li> <li> <p>Create a simple CLI that continuously asks for an IP address and prints the IP address class.</p> <ul> <li>Hint: use <code>input()</code><ul> <li>Does the function <code>input</code> take any arguments? What does its signature look like?</li> </ul> </li> <li>Extra assingment: Make the app crash by entering the wrong input, and then implement input sanitation/validation so the app can't be crashed by entering any wrong input.<ul> <li>Did you get it right? Try your best to crash the app by.</li> </ul> </li> </ul> </li> <li> <p>Now make it so that when the user enters a valid IP address, the program calls the windows (cmd) ping command and prints the output to the CLI and then goes back to the CLI you wrote, so that a user can use your CLI as a special ping-tool.</p> <ul> <li>Hint: use <code>subprocess</code></li> </ul> </li> </ul>"},{"location":"#intermediate-building-proficiency","title":"Intermediate (Building Proficiency)","text":"<ul> <li>Advanced Data Structures<ul> <li>Nested lists and dicts</li> <li>Deque (<code>collections.deque</code>)</li> <li>DefaultDict (<code>collections.defaultdict</code>)</li> </ul> </li> <li>String Manipulation<ul> <li>String formatting (<code>f-strings</code>, <code>.format()</code>)</li> <li>String methods (<code>.split()</code>, <code>.join()</code>, <code>.replace()</code>, regex)</li> </ul> </li> <li>File Handling<ul> <li>Reading &amp; writing files (<code>open()</code>, <code>with</code> statement)</li> <li>JSON and CSV parsing (<code>json</code>, <code>csv</code> modules)</li> </ul> </li> <li>Exception Handling<ul> <li><code>try</code>, <code>except</code>, <code>finally</code>, <code>raise</code></li> <li>Custom exceptions</li> </ul> </li> <li>List Comprehensions &amp; Generators<ul> <li><code>[x**2 for x in range(10)]</code></li> <li>Generator functions (<code>yield</code>)</li> </ul> </li> <li>Lambda Functions &amp; Functional Programming<ul> <li><code>map()</code>, <code>filter()</code>, <code>reduce()</code></li> <li><code>lambda</code> expressions</li> </ul> </li> <li>Modules &amp; Packages<ul> <li><code>import</code>, <code>from module import</code></li> <li>Creating and using modules</li> <li>Virtual environments (<code>venv</code>)</li> </ul> </li> </ul>"},{"location":"#advanced-mastery-level","title":"Advanced (Mastery Level)","text":"<ul> <li>Object-Oriented Programming (OOP)<ul> <li>Classes, Objects</li> <li>Inheritance, Polymorphism, Encapsulation</li> <li>Dunder (<code>__init__</code>, <code>__str__</code>, <code>__repr__</code>)</li> <li>Abstract classes (<code>ABC</code> module)</li> </ul> </li> <li>Concurrency &amp; Parallelism<ul> <li>Multithreading (<code>threading</code> module)</li> <li>Multiprocessing (<code>multiprocessing</code> module)</li> <li>Async programming (<code>asyncio</code>, <code>await</code>, <code>async</code>)</li> </ul> </li> <li>Metaprogramming<ul> <li>Decorators (<code>@staticmethod</code>, <code>@classmethod</code>, custom decorators)</li> <li>Metaclasses (<code>type</code>, <code>__new__</code>)</li> </ul> </li> <li>Networking &amp; Sockets<ul> <li><code>socket</code> programming (TCP/UDP)</li> <li><code>asyncio</code> for networking</li> </ul> </li> <li>Regular Expressions<ul> <li><code>re</code> module for pattern matching</li> </ul> </li> <li>Databases &amp; ORMs<ul> <li>SQLite, PostgreSQL, MySQL (<code>sqlite3</code>, <code>psycopg2</code>, <code>SQLAlchemy</code>)</li> <li>ORMs like Django ORM, SQLAlchemy</li> </ul> </li> <li>Unit Testing &amp; Test-Driven Development (TDD)<ul> <li><code>unittest</code> module</li> <li><code>pytest</code></li> <li>Mocking (<code>unittest.mock</code>)</li> </ul> </li> <li>Logging &amp; Debugging<ul> <li><code>logging</code> module (<code>log.debug()</code>, <code>log.info()</code>, <code>log.warning()</code>)</li> <li>Debugging (<code>pdb</code>, <code>breakpoints()</code>)</li> </ul> </li> <li>Working with APIs<ul> <li><code>requests</code>, <code>http.client</code></li> <li>RESTful API consumption (<code>requests.get()</code>, <code>requests.post()</code>)</li> </ul> </li> </ul>"},{"location":"#expert-deep-dive-into-specializations","title":"Expert (Deep Dive into Specializations)","text":"<ul> <li>Design Patterns in Python<ul> <li>Singleton, Factory, Observer, Decorator patterns</li> </ul> </li> <li>Advanced Algorithms &amp; Data Structures<ul> <li>Graphs (<code>networkx</code>)</li> <li>Trees (Binary Trees, BST)</li> <li>Dynamic Programming</li> <li>Sorting &amp; Searching (<code>heapq</code>, <code>bisect</code>)</li> </ul> </li> <li>Performance Optimization<ul> <li>Profiling (<code>cProfile</code>, <code>line_profiler</code>)</li> <li>Memory management (<code>gc</code>, <code>sys.getsizeof()</code>)</li> <li>Cython, Numba, PyPy for performance boost</li> </ul> </li> <li>Security &amp; Cryptography<ul> <li>Hashing (<code>hashlib</code>, <code>bcrypt</code>)</li> <li>Encryption (<code>pycryptodome</code>, <code>cryptography</code>)</li> <li>Secure coding practices</li> </ul> </li> <li>Building CLI Tools<ul> <li><code>argparse</code>, <code>click</code></li> <li>Creating command-line utilities</li> </ul> </li> <li>Web Development<ul> <li>Flask &amp; Django frameworks</li> <li>WebSockets (<code>websockets</code>, <code>socket.io</code>)</li> </ul> </li> <li>Machine Learning &amp; AI<ul> <li><code>numpy</code>, <code>pandas</code>, <code>scikit-learn</code>, <code>tensorflow</code></li> <li>Deep Learning models</li> </ul> </li> <li>DevOps &amp; Automation<ul> <li>Docker, Kubernetes</li> <li>CI/CD pipelines</li> <li>Infrastructure as Code (<code>Ansible</code>, <code>Terraform</code>)</li> </ul> </li> <li>Low-Level Python &amp; C Extensions<ul> <li><code>ctypes</code>, <code>Cython</code></li> <li>Interfacing with C/C++ code</li> </ul> </li> <li>Distributed Systems &amp; P2P Networks<ul> <li><code>zmq</code>, <code>grpc</code></li> <li>Building decentralized applications</li> </ul> </li> </ul>"},{"location":"getting_started/git_crashcourse/","title":"Git Crashcourse","text":"<p>Absolutely, Tobias! Here's a very brief Git crash course, written in Markdown, ready to drop directly into your MkDocs <code>docs/git-crashcourse.md</code> file.</p>"},{"location":"getting_started/git_crashcourse/#docsgit-crashcoursemd","title":"<code>docs/git-crashcourse.md</code>","text":"<pre><code># \ud83d\ude80 Git Crash Course\n\nA lightning-fast intro to **Git** for beginners or rusty engineers.\n\n---\n\n## \ud83d\udce6 Initialize a Repository\n\n```bash\ngit init\n</code></pre> <p>Starts a new Git repository in the current folder.</p>"},{"location":"getting_started/git_crashcourse/#stage-commit-changes","title":"\u2795 Stage &amp; Commit Changes","text":"<pre><code>git add file.py        # Stage a file\ngit commit -m \"Message\"  # Commit with message\n</code></pre> <p>Use <code>.</code> to stage everything: <code>git add .</code></p>"},{"location":"getting_started/git_crashcourse/#check-status","title":"\ud83d\udd0d Check Status","text":"<pre><code>git status\n</code></pre> <p>Shows staged/unstaged files and branch info.</p>"},{"location":"getting_started/git_crashcourse/#view-commit-history","title":"\ud83d\udcdc View Commit History","text":"<pre><code>git log --oneline\n</code></pre> <p>Short view of recent commits.</p>"},{"location":"getting_started/git_crashcourse/#undo-changes","title":"\ud83d\udd01 Undo Changes","text":"<pre><code>git restore file.py         # Discard local changes\ngit reset HEAD file.py      # Unstage a file\ngit revert &lt;commit&gt;         # Create a new commit that reverts a change\n</code></pre>"},{"location":"getting_started/git_crashcourse/#remote-repositories","title":"\ud83c\udf10 Remote Repositories","text":"<pre><code>git clone &lt;repo-url&gt;\ngit remote add origin &lt;url&gt;\ngit push -u origin main\n</code></pre> <p>Connect to and push to GitHub or another remote.</p>"},{"location":"getting_started/git_crashcourse/#pull-latest-changes","title":"\ud83d\udd04 Pull Latest Changes","text":"<pre><code>git pull\n</code></pre> <p>Sync your local repo with the remote.</p>"},{"location":"getting_started/git_crashcourse/#branching","title":"\ud83d\udee0\ufe0f Branching","text":"<pre><code>git branch feature-x\ngit checkout feature-x\n# or in one command\ngit switch -c feature-x\n</code></pre> <p>Use branches to isolate features or fixes.</p>"},{"location":"getting_started/git_crashcourse/#merge-branches","title":"\ud83d\udce2 Merge Branches","text":"<pre><code>git checkout main\ngit merge feature-x\n</code></pre> <p>Merges feature branch into <code>main</code>.</p>"},{"location":"getting_started/git_crashcourse/#delete-branch","title":"\ud83d\udca5 Delete Branch","text":"<pre><code>git branch -d feature-x\n</code></pre> <p>Deletes a local branch after it's merged.</p>"},{"location":"getting_started/git_crashcourse/#summary-cheat-sheet","title":"\u2705 Summary Cheat Sheet","text":"Command Purpose <code>git init</code> Initialize repo <code>git add .</code> Stage all changes <code>git commit -m \"msg\"</code> Commit changes <code>git status</code> Check state <code>git log --oneline</code> View commit history <code>git clone &lt;url&gt;</code> Clone remote repo <code>git pull</code> / <code>git push</code> Sync with remote <code>git branch</code> / <code>switch</code> Manage branches <code>git merge</code> Merge changes <p>\ud83d\udcd8 Use Git daily. Commit often. Push deliberately.</p>"},{"location":"getting_started/git_crashcourse/#git-workflow-diagram","title":"\ud83d\udd01 Git Workflow Diagram","text":"<pre><code>flowchart TD\n    A[Working Directory] --&gt;|git add| B[Staging Area]\n    B --&gt;|git commit| C[Local Repository]\n    C --&gt;|git push| D[Remote Repository]\n\n    D --&gt;|git clone / git pull| A\n    C --&gt;|git log| E[History]\n    A --&gt;|git status| F[Status Check]\n    A --&gt;|git diff| G[Compare Changes]</code></pre> <p>This diagram shows the basic Git workflow and commands that connect each stage.</p>"},{"location":"getting_started/introduction/","title":"Introduction","text":""},{"location":"getting_started/introduction/#installing-python","title":"Installing Python","text":"<p>Go to Python's Official Website and navigate into version 3.13.2 by clicking here and download and install Windows 64-bit installer under the files section.</p>"},{"location":"getting_started/introduction/#installing-an-ide","title":"Installing an IDE","text":"<p>Go this website and download and install PyCharm Community Edition</p>"},{"location":"getting_started/introduction/#setup-a-bare-bones-python-application-in-pycharm","title":"Setup a bare-bones Python Application in PyCharm","text":"<p>Then open PyCharm and create a new Pure Python project and create a new file named main.py.</p> <p>Note</p> <p>This automatically sets up a virtual environment using <code>virtualenv</code>.</p> <p></p> <p>Write the following inside the file:</p> main.py<pre><code>print(\"Hello World!\")\n</code></pre> <p>Open up the terminal and type <code>python main.py</code> and press enter.</p>"},{"location":"getting_started/introduction/#pycharm-overview","title":"PyCharm Overview","text":"<p>Lets explore PyCharm briefly before we continue, there are serveral important windows that you will eventually familiarize yourself with. Right now I will go over them very briefly. </p> <ul> <li>Project (blue)</li> <li>Structure (white)</li> <li>Terminal (purple)</li> <li>Python Console (orange)</li> <li>Code Editor (red)</li> </ul>"},{"location":"getting_started/introduction/#global-scope-code","title":"Global-scope Code","text":"<p>By default, Python allows you to type code directly into a file and run it, you won't get an error for that - but you won't get a high grade either!</p> <p>Here I've written a function for looking up saved SSIDs (and their stored passwords) on Windows computers. The example illustrates how Python is called without using a main-function as an entry point. This method has serious issues though, and we'll explore this further in the coming chapter.</p> <p>Special print function</p> <p>If you look closely you will see we are using a function called <code>pprint</code>, that is not a typo, it is a function very similar to Pythons built-in <code>print</code> function, except it pretty-prints the content of the variable it is wrapping. Using <code>pprint</code> is often useful when debugging and troubleshooting because it allows you to quickly inspect the contents of complex datastructures.</p> ssid_snitch.py<pre><code>import platform\nimport subprocess\nfrom pprint import pprint\nfrom typing import Any, Dict\n\n\ndef get_ssid_store() -&gt; Dict[Any, Any]:\n    \"\"\"  \n    Reads all saved WLAN profiles for the user running this script,\n    and returns a mapping of `ssid:ssid_password` for each stored WLAN profile found.\n    \"\"\"\n    if not platform.uname().system.lower() == \"windows\":\n        raise OSError(\"Requires the Windows operating system\")\n    ssid_pw_map: Dict[Any, Any] = {}\n    data = subprocess.check_output([\"netsh\", \"wlan\", \"show\", \"profiles\"]).decode(\"utf-8\").split(\"\\n\")\n    profiles = [i.split(\":\")[1][1:-1] for i in data if \"All User Profile\" in i]\n    for ssid in profiles:\n        results = (\n            subprocess.check_output([\"netsh\", \"wlan\", \"show\", \"profiles\", ssid, \"key=clear\"])\n            .decode(\"utf-8\")\n            .split(\"\\n\")\n        )\n        results = [b.split(\":\")[1][1:-1] for b in results if \"Key Content\" in b]\n        try:\n            ssid_pw_map.setdefault(ssid, results[0])\n        except IndexError:\n            ssid_pw_map.setdefault(ssid, \"N/A\")\n    return ssid_pw_map\n\n\npprint(get_ssid_store())\nprint(\"Any Python is valid here!\")\n</code></pre>"},{"location":"getting_started/pep8_overview/","title":"PEP8","text":""},{"location":"getting_started/pep8_overview/#pep-8-summary-python-style-guide","title":"PEP 8 Summary: Python Style Guide","text":"<p>PEP 8 is Python\u2019s official style guide that provides conventions for writing clean, readable, and consistent code. It helps improve code maintainability and collaboration. Below is a concise summary of its key points:</p>"},{"location":"getting_started/pep8_overview/#1-code-layout","title":"1. Code Layout","text":"<ul> <li>Indentation: Use 4 spaces per indentation level (no tabs).<ul> <li>This is only true if you're not using a modern IDE - modern IDEs like PyCharm or vscode converts tabs to spaces automatically under   the hood.</li> </ul> </li> <li>Line length: Limit lines to 79 characters (72 for docstrings).<ul> <li>This is more of a practical guideline rooted in the fact that with 79 characters the code is perfectly readable in old terminal   emulators.</li> </ul> </li> <li>Blank lines:<ul> <li>Separate top-level functions and class definitions with two blank lines.</li> <li>Use one blank line to separate methods within a class.</li> <li>Most IDE's have either automatic linters that enforces this on save or shortcuts that handles this (Alt+Shift+L in PyCharm for   example)</li> </ul> </li> <li>Imports:<ul> <li>Place imports at the top of the file.</li> <li>Use one import per line.</li> <li>Follow the order:<ol> <li>Standard library imports</li> <li>Third-party imports</li> <li>Local application imports</li> </ol> </li> </ul> </li> </ul>"},{"location":"getting_started/pep8_overview/#2-naming-conventions","title":"2. Naming Conventions","text":"<ul> <li>Variables &amp; Functions: <code>snake_case</code> (e.g., <code>calculate_total_price</code>)</li> <li>Classes: <code>PascalCase</code> (e.g., <code>ApiAuthenticator</code>)</li> <li>Constants: <code>UPPER_CASE_WITH_UNDERSCORES</code></li> <li>Private methods or attributes: Prefix with an underscore (<code>_protected_method</code>, <code>__private_method</code>)</li> <li>Avoid:<ul> <li>Names that shadow built-in functions (<code>list</code>, <code>dict</code>, <code>id</code>).</li> <li>Single-character names, except for counters (such as <code>i</code>, <code>j</code> in loops).<ul> <li>Generally - no single-character variable names.</li> </ul> </li> </ul> </li> </ul>"},{"location":"getting_started/pep8_overview/#3-whitespace-usage","title":"3. Whitespace Usage","text":"<ul> <li>Around Operators:<ul> <li>\u2705 <code>x = a + b</code></li> <li>\u274c <code>x=a+b</code></li> </ul> </li> <li>Inside Brackets &amp; Parentheses:<ul> <li>\u2705 <code>my_list = [1, 2, 3]</code></li> <li>\u274c <code>my_list = [ 1,2,3 ]</code></li> </ul> </li> <li>After Commas:<ul> <li>\u2705 <code>func(a, b, c)</code></li> <li>\u274c <code>func(a,b,c)</code></li> </ul> </li> </ul>"},{"location":"getting_started/pep8_overview/#4-comments-docstrings","title":"4. Comments &amp; Docstrings","text":"<ul> <li>Use comments sparingly and make them meaningful.</li> <li>Inline comments: Place at least two spaces before <code>#</code>:</li> </ul> <pre><code>x = 42  # This is an example of using two spaces after your code before placing a comment.\n</code></pre> <ul> <li>Block comments: Explain complex logic above the code block.</li> </ul> <pre><code># Check if the user has the required permissions before proceeding.\n# If the user is an admin, allow full access; otherwise, restrict actions.\nif user.is_admin:\n    grant_full_access()\nelse:\n    restrict_access()\n</code></pre> <ul> <li>Docstrings:<ul> <li>Used for modules, functions, classes, methods.</li> <li>Use triple-double quotes:</li> </ul> </li> </ul> <p><pre><code>def multiply_numbers(param1, param2):\n    \"\"\"\n    Compute the sum of two numbers.\n\n    This function takes two numerical parameters and returns their sum.\n    It does not perform any type checking, so ensure the inputs are valid numbers.\n\n    Args:\n        param1 (int or float): The first number.\n        param2 (int or float): The second number.\n\n    Returns:\n        int or float: The sum of param1 and param2.\n    \"\"\"\n    return param1 * param2\n</code></pre> Real world example - not strict doc-strings but more useful for objects IMO. <pre><code>class SshUtils:  \n    def __init__(self, profile_folder, descriptive_name: str = None, keyfile_name=\"id_rsa\", passphrase=None):\n        \"\"\"  \n        Creates an SSH key-pair inside playbooks/profile folder with name `key_name`.pub for public, and\n        `key_name` for private.  \n\n        Usage example:\n        ssh_utils = SshUtils(profile_folder=\"test_profile\", key_name=\"id_rsa\", passphrase=\"Password1234!\")        \n        ssh_utils.create_ssh_key_pair(key_bits=4096)\n        print(ssh_utils.read_public_key())  \n\n        Passphrase is optional and can be omitted.\n        \"\"\"\n        self.key_dir = os.path.expanduser(PathManager().active_profile_dir / \".ssh\")\n        self.key_name = keyfile_name\n        self.descriptive_name = descriptive_name\n        self.passphrase = passphrase\n        self.priv_key_path = Path(self.key_dir).joinpath(self.key_name)\n        self.pub_key_path = self.priv_key_path.with_suffix(\".pub\")\n</code></pre></p>"},{"location":"getting_started/pep8_overview/#5-best-practices","title":"5. Best Practices","text":"<ul> <li>Boolean Comparisons:<ul> <li>\u2705 <code>if is_valid:</code></li> <li>\u274c <code>if is_valid == True:</code></li> </ul> </li> <li>Avoid Mutable Defaults:</li> </ul> <pre><code># Bad \ndef append_to_list(value, my_list=[]):\n    my_list.append(value)\n    return my_list\n\n\n# Good\ndef append_to_list(value, my_list=None):\n    if my_list is None:\n        my_list = []\n    my_list.append(value)\n    return my_list\n    `\n</code></pre> <ul> <li>Use <code>is</code> for <code>None</code> comparisons:<ul> <li>\u2705 <code>if x is None:</code></li> <li>\u274c <code>if x == None:</code></li> </ul> </li> <li>Use <code>with</code> for file handling:<ul> <li>the <code>with</code> imperative is a context-manager in Python and automatically handles closing the file handle so you don't accidentially   drown your system with open file handles.<ul> <li>The lesson: always use context-managers when you have the option, they're a great safeguard and makes your code more pythonic!</li> </ul> </li> </ul> </li> </ul> <pre><code>with open(\"file.txt\", \"r\") as f:\n    content = f.read()\n</code></pre>"},{"location":"getting_started/pep8_overview/#6-object-oriented-programming-oop","title":"6. Object-Oriented Programming (OOP)","text":"<ul> <li>Class methods should use <code>@classmethod</code> and <code>@staticmethod</code> decorators where applicable.</li> <li>Use <code>self</code> for instance methods and <code>cls</code> for class methods.</li> <li>Keep class attributes private (<code>_attr</code> or <code>__attr</code>).</li> </ul>"},{"location":"getting_started/pep8_overview/#7-exceptions-error-handling","title":"7. Exceptions &amp; Error Handling","text":"<ul> <li>Use exceptions instead of returning error codes:</li> </ul> <pre><code>try:\n    result = 10 / x\nexcept ZeroDivisionError as e:\n    print(f\"Error: {e}\")\n    `\n</code></pre> <ul> <li>Use specific exception types (avoid catching <code>Exception</code> unless necessary).<ul> <li><code>Exception</code> is the base-class that all other exceptions inherit from in Python, this means that it will catch any exception - this is   rarely what you wan't and will give you a lot of headaches!</li> </ul> </li> </ul>"},{"location":"getting_started/pep8_overview/#8-string-formatting","title":"8. String Formatting","text":"<ul> <li>Prefer f-strings (Python 3.6+):</li> </ul> <pre><code>name = \"Alice\"\nprint(f\"Hello, {name}!\")\n`\n\nimport math\n\nprint(f\"Pi is approximately {math.pi:0.99})  # Prints Pi with 99 decimal points.\n      &gt;&gt; &gt; \"Pi is approximately 3.141592653589793115997963468544185161590576171875\"\n</code></pre> <ul> <li>Avoid <code>+</code> for string concatenation.<ul> <li>Don't do: <code>\"Pi is a mathematical constant defined as \" + str(math.pi) + \". It's apprixmiately equal to 3.14\"</code></li> </ul> </li> </ul> <p>The old way is to use <code>\"this is a string\".format(name)</code>. It is only useful under very specific scenarious and with f-strings, you can do a lot of really neat stuff.</p>"},{"location":"getting_started/pep8_overview/#conclusion","title":"Conclusion","text":"<p>Following PEP 8 ensures clean, consistent, and professional Python code. Many tools like <code>flake8</code>, <code>black</code>, and <code>pylint</code> help enforce PEP 8 automatically, but for some things it's necessary that you make it a practice to always follow the standard</p> <p>This goes for things like proper casing of variables, functions and classes and indentation (whitespace) for example, while other things like line length (which are inherited from the widths of classic terminal emulators) are somewhat more flexible and then again you have string formatting where there are exceptions to the rule and then on the other hand we have stuff like import order which can be automated with tools like <code>isort</code> which are similar in nature to <code>black</code> and <code>flake8</code>.</p> <p>So in summary - following PEP8 makes your code cleaner which in turn makes it more readable for other people - code is foremost meant to be read by people and only secondarily read by computers - if that was not true, we would still be using machine language, but we're not machines, we're humans, so we write clean code.</p>"},{"location":"getting_started/pep8_overview/#exercises","title":"Exercises","text":"<p>No exercises, but try to return to this chapter once in a while and refresh your memory on different topics every now and then.</p>"},{"location":"getting_started/scope_rules_in_python/","title":"Scoping","text":""},{"location":"getting_started/scope_rules_in_python/#python-scoping-understanding-legb-rule-scope-types","title":"Python Scoping: Understanding LEGB Rule &amp; Scope Types","text":"<p>In Python, scoping determines how variables are searched and accessed in different parts of a program. Python uses the LEGB rule (Local, Enclosing, Global, Built-in) to resolve variable names.</p> <p>Scoping is fundamentally about where a variable is accessible in a program. When you declare a variable, not all parts of your code can see or modify it. The question scoping answers is:</p> <p>\"I have data or logic stored in this variable, but I need to access it somewhere else \u2013 can I access it directly, or do I need to pass it explicitly?\"</p> <p>This leads to different strategies based on where the variable is declared and where it needs to be used. Depending on the situation, you might need to:</p> <ul> <li>Pass it as a function argument</li> <li>Store it as an instance variable in a class</li> <li>Use closures for state retention</li> <li>Use global or nonlocal (sparingly)</li> </ul> <p>The main thing you should focus on right now, is understanding the rule of: * Local scope (L) * Nested scope (E) * Global scope (G) * Built-in scope (B)</p>"},{"location":"getting_started/scope_rules_in_python/#the-four-scope-levels-legb-rule","title":"The Four Scope Levels (LEGB Rule)","text":"<p>Python follows a hierarchy when looking up variables:</p> <p>1\ufe0f\u20e3 Local (L): Inside the current function (or lambda). 2\ufe0f\u20e3 Enclosing (E): Inside any outer function (if using nested functions). 3\ufe0f\u20e3 Global (G): Defined at the top level of a module or file. 4\ufe0f\u20e3 Built-in (B): Predefined Python names like <code>len()</code>, <code>print()</code>, <code>range()</code>.</p> <p>Python searches for a variable in this order: Local \u2192 Enclosing \u2192 Global \u2192 Built-in</p> <p>If the variable isn't found, Python raises a <code>NameError</code>.</p>"},{"location":"getting_started/scope_rules_in_python/#1-local-scope","title":"1. Local Scope","text":"<p>A variable defined inside a function is local to that function.</p> <p><pre><code>def my_function():\n    x = 10  # Local scope\n    print(x)\n\nmy_function()\n# print(x)  # \u274c NameError: x is not defined (because it's local to my_function)\n</code></pre> We'll get to exceptions later.</p>"},{"location":"getting_started/scope_rules_in_python/#2-enclosing-scope-nested-functions","title":"2. Enclosing Scope (Nested Functions)","text":"<p>If a variable isn't found in local scope, Python checks enclosing functions.</p> <pre><code>def outer():\n    y = 20  # Enclosing scope\n\n    def inner():\n        print(y)  # Can access y from enclosing function\n\n    inner()\n\nouter()\n</code></pre> <p>\ud83d\udd39 <code>**inner()**</code> can access <code>****y****</code> because <code>****y****</code> is in the enclosing function <code>outer()</code>. \ud83d\udd39 But inner functions can't modify enclosing variables unless explicitly declared with ****<code>**nonlocal**</code>.</p>"},{"location":"getting_started/scope_rules_in_python/#modifying-an-enclosing-variable-with-nonlocal","title":"Modifying an Enclosing Variable with <code>**nonlocal**</code>","text":"<pre><code>def outer():\n    y = 20  # Enclosing scope\n\n    def inner():\n        nonlocal y  # Declaring y as nonlocal\n        y += 10\n        print(y)\n\n    inner()\n    print(y)  # Modified in enclosing scope\n\nouter()\n</code></pre> <p>\ud83d\udd39 Without <code>nonlocal</code>, <code>y += 10</code> would create a new local variable instead of modifying the enclosing <code>y</code>.</p>"},{"location":"getting_started/scope_rules_in_python/#3-global-scope","title":"3. Global Scope","text":"<p>Variables defined outside functions are global and accessible everywhere except when modified inside a function (unless declared <code>global</code>).</p> <pre><code>z = 30  # Global scope\n\ndef my_function():\n    print(z)  # Access global variable\n\nmy_function()\nprint(z)  # Still accessible globally\n</code></pre> <p>Global variables can be accessed inside functions but not modified unless declared ****<code>**global**</code>.</p>"},{"location":"getting_started/scope_rules_in_python/#modifying-a-global-variable-with-global","title":"Modifying a Global Variable with <code>**global**</code>","text":"<pre><code>counter = 0  # Global scope\n\ndef increment():\n    global counter  # Declaring counter as global\n    counter += 1  # Now modifying the global variable\n\nincrement()\nprint(counter)  # Output: 1\n</code></pre> <p>\ud83d\udd39 Without <code>global</code>, <code>counter += 1</code> would create a new local variable, leaving the global <code>counter</code> unchanged.</p> <p>This is purely for demonstration - using <code>global</code> is usually bad practice and is often considered a code smell. In multithreaded programs it can cause deadlocks and it makes debugging and software testing harder and results in code that is harder to reason about and understand. </p>"},{"location":"getting_started/scope_rules_in_python/#4-built-in-scope","title":"4. Built-in Scope","text":"<p>Python has predefined functions and keywords that exist in the built-in scope.</p> <pre><code>print(len(\"Python\"))  # len() is in built-in scope\n</code></pre> <p>\ud83d\udd39 These are always available from anywhere in your code, without you having to do anything! - Unless you override them, aka. shadow them (which is bad).</p>"},{"location":"getting_started/scope_rules_in_python/#overriding-a-built-in-function-not-recommended","title":"Overriding a Built-in Function (Not Recommended)","text":"<pre><code>def len(x):  # Overriding built-in function\n    return \"Oops!\"\n\nprint(len(\"Python\"))  # Oops!\n</code></pre> <p>Avoid naming variables/functions the same as built-in ones to prevent unexpected behavior (this phenomenon, when done, is called <code>shadowing</code>).</p>"},{"location":"getting_started/scope_rules_in_python/#exercises","title":"Exercises","text":"<p>No exercises at this point in time.</p>"},{"location":"getting_started/the_main_issue/","title":"The <code>Main</code> Issue","text":"<p>In this section we will explore the unintended side-effects that arises when main-functions are omitted.</p>"},{"location":"getting_started/the_main_issue/#the-issue-with-not-using-a-main-function","title":"The issue with not using a main-function","text":"<p>But that is not the proper way to do it because it easily (and most certainly will if your project ever gets big enough) lead to unintended side effects when importing modules (Python code such as functions stored in other .py files).</p> <p>Instead you should do it like this:</p> <pre><code>def my_logic():\n    # Execute some logic\n    pass\n\nif __name__ == '__main__':\n    print(\"executing my logic\")\n    my_logic()\n</code></pre> <p>Doing it this way is correct and will not cause any of the code to ever be executed when importing the function <code>my_logic</code> into another file, unless you explicitly instruct Python to do it somewhere in your code. Alas, it gives you control over the code you execute - while writing Python without the <code>if __name__ == '__main__':</code> clause will always execute that code whenever you import the file it is contained in, into another file.</p> <p>And you can of course run both equally by typing <code>python main.py</code> in the terminal - in that way they work identically.</p>"},{"location":"getting_started/the_main_issue/#furhter-illustration","title":"Furhter illustration","text":"<p>Below we have a file - let's give it some name, say: sniffer.py sniffer.py<pre><code>import time\n\n\ndef get_epoch_timestamp():\n    \"\"\"Returns the current epoch timestamp in seconds.\"\"\"\n    return int(time.time())  # Convert float to int for whole seconds\n\n\nprint(\"[X] Setting up my l33t sniffing tool\")\nconfigure_scapy()\nshutdown_os_ports()\nsetup_evasion()\nintercepter = NetworkSniffer(interface=\"enet01\").listen_from_attached_network_hub()\nprint(\"[X] Setup completed - intercepter initialized on enet01 interface\")\n\nwhile True:\n    print(\"[X] Listening for and intercepting traffic\")\n    intercepter.listen(save_to=f\"intercepted_traffic__{get_epoch_timestamp()}.pcap\")\n</code></pre></p>"},{"location":"getting_started/the_main_issue/#the-problem","title":"The problem!","text":"<p>Now we have another file where we wish to use the <code>get_epoch_timestamp()</code> from earlier: <pre><code>import sniffer # imports sniffer.py\n\nif __name__ == '__main__': # It doesn't prevent the error that is about to happend, that we are using a proper main method here!\n    print(\"The current epoch timestamp is: {sniffer.get_epoch_timestamp()}\")\n</code></pre> 1.  I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown. Now what do you think will happend when we run this new file, which additionally has a main-function?</p> <p>If we inspect the print statements we will see the following thing happending: <pre><code>&gt;&gt;&gt; [X] Setting up my l33t sniffing tool\n&gt;&gt;&gt; [X] Setup completed - intercepter initialized on enet01 interface\n</code></pre> And from thereon the program will hang indefinitely because it's stuck in the while loop from sniffer.py - but that's not the main issue! The main issue is that we wished only to use the get_epoch_timestamp() function in our new file, but instead we ran all the code inside of sniffer.py - not good!</p> <p>Alas, aim to never write Python code directly inside a Python file unless you're just testing stuff out.</p>"},{"location":"python_advanced/introduction/","title":"Introduction","text":""},{"location":"python_advanced/introduction/#python-advanced","title":"Python Advanced","text":""},{"location":"python_beginner/elementary_datatypes/","title":"Understanding <code>int()</code>","text":"<p>This tutorial introduces integers (<code>int</code>) in Python, a fundamental data type you'll use frequently in networking scripts, automation, and calculations.</p>"},{"location":"python_beginner/elementary_datatypes/#integers-in-python","title":"\ud83d\udccc Integers in Python","text":"<pre><code>if __name__ == '__main__':  \n    \"\"\" \n    Integers (`int`) are one of the most fundamental datatypes in Python.\n    You'll work with them *a lot*. They are simple in nature and form the \n    starting point for understanding Python's datatypes.\n    \"\"\"\n\n    # Basic integer assignment\n    this_is_an_int = 256  \n    this_is_also_an_int = int(256)  # These two are equivalent.\n\n    # Initializing an integer to zero using `int()`\n    this_just_initializes_to_the_number_zero = int()  \n    print(this_just_initializes_to_the_number_zero)  # Output: 0  \n\n    # Strings and type conversion\n    this_is_not_an_int_its_a_string = \"256\"  \n    but_with_type_conversion_we_can_turn_it_into_an_int = int(this_is_not_an_int_its_a_string)  # Converts to an integer\n\n    # Comparison of integer creation methods\n    if this_is_an_int == this_is_also_an_int:  \n        print('Takeaway: You can create integers using direct assignment or int(). '\n              'Additionally, `int()` can perform type conversions, as demonstrated with `int(\"256\")`.')  \n\n    # int() can also convert binary strings into their decimal equivalents\n    for bits in range(8, 32, 8):  \n        \"\"\"\n        This for-loop runs three times:\n        - First iteration: bits = 8\n        - Second iteration: bits = 16\n        - Third iteration: bits = 32\n\n        The range() function works as:\n        range(start, stop, step)\n        - You can specify only `start`, or `start` and `stop`, or all three.\n        \"\"\"\n\n        val = int(\"1\" * bits, 2)  # Creates a binary string (e.g., \"11111111\") and converts it to decimal\n        print(val)  \n\n        # The second argument in int() (here: 2) defines the base.\n        # Try reasoning about the output in your head before running the script!\n</code></pre>"},{"location":"python_beginner/elementary_datatypes/#exercises","title":"\ud83d\udcdd Exercises","text":"<p>These exercises will challenge your understanding of <code>int()</code> and <code>range()</code>.</p>"},{"location":"python_beginner/elementary_datatypes/#exercise-1-fun-with-negative-ranges","title":"Exercise 1: Fun with Negative Ranges","text":""},{"location":"python_beginner/elementary_datatypes/#steps","title":"Steps:","text":"<ol> <li>Create a main function.</li> <li>Inside the function, write a <code>for</code> loop using <code>range()</code>.<ul> <li>It should start at -15, end at -16, and decrease by 3 each time (<code>step = -3</code>).</li> </ul> </li> <li>Inside the loop, print the current integer.</li> <li>Run the script and predict what will happen.</li> <li>Compare the output with your expectation.</li> <li>Why did this happen? Play around with different values to find out!</li> </ol>"},{"location":"python_beginner/elementary_datatypes/#hints","title":"Hints:","text":"<pre><code>def main():\n    for num in range(-15, -16, -3):\n        print(num)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ul> <li>What happens when the range \"ends before it starts\"?</li> <li>Change <code>range(-15, -30, -3)</code>, then <code>range(-15, -10, -3)</code>, and observe.</li> </ul>"},{"location":"python_beginner/elementary_datatypes/#exercise-2-understanding-int","title":"Exercise 2: Understanding <code>int()</code>","text":""},{"location":"python_beginner/elementary_datatypes/#steps_1","title":"Steps:","text":"<ol> <li>Create a main function.</li> <li> <p>Create a string variable that holds <code>\"11\"</code>. Name it anything.</p> <pre><code>my_var = \"11\"\n</code></pre> </li> <li> <p>Create a new variable equal to the first one:</p> <pre><code>my_new_var = my_var\n</code></pre> </li> <li> <p>Print the new variable using the <code>print()</code> function:</p> <pre><code>print(my_new_var)  # Output: \"11\"\n</code></pre> </li> <li> <p>Now convert it into an integer using <code>int()</code>:</p> <pre><code>print(int(my_new_var, 10))  # Explicit base 10 conversion\n</code></pre> </li> <li> <p>Try removing <code>,10</code> and print again:</p> <pre><code>print(int(my_new_var))  # What happens?\n</code></pre> </li> <li> <p>Try changing <code>,10</code> to <code>,2</code> and print again:</p> <pre><code>print(int(my_new_var, 2))  # What happens?\n</code></pre> </li> <li> <p>Play around with different bases to deepen your understanding!</p> </li> </ol>"},{"location":"python_beginner/elementary_datatypes/#hints_1","title":"Hints:","text":"<ul> <li>What happens if <code>\"11\"</code> is interpreted as base-10?</li> <li>What happens if <code>\"11\"</code> is interpreted as base-2 (binary)?</li> <li>Try using different string values:<ul> <li><code>\"100\"</code> as base-2?</li> <li><code>\"A\"</code> as base-16?</li> </ul> </li> </ul>"},{"location":"python_beginner/elementary_datatypes/#takeaways","title":"\ud83c\udfaf Takeaways","text":"<p>\u2714 <code>int()</code> can initialize integers (<code>int()</code> \u2192 <code>0</code>). \u2714 <code>int()</code> can convert strings to numbers (<code>int(\"123\")</code> \u2192 <code>123</code>). \u2714 <code>int()</code> can convert binary, octal, and hexadecimal (<code>int(\"FF\", 16)</code> \u2192 <code>255</code>). \u2714 <code>range(start, stop, step)</code> lets you iterate over sequences dynamically.</p>"},{"location":"python_beginner/introduction/","title":"Introduction","text":""},{"location":"python_beginner/introduction/#python-basics","title":"Python Basics","text":""},{"location":"python_intermediate/introduction/","title":"Introduction","text":""},{"location":"python_intermediate/introduction/#python-intermediate","title":"Python Intermediate","text":""},{"location":"python_mastery/introduction/","title":"Introduction","text":""},{"location":"python_mastery/introduction/#python-mastery","title":"Python Mastery","text":""}]}