{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#python-from-absolute-beginner-to-expert","title":"Python: From Absolute Beginner to Expert","text":""},{"location":"#a-crashcourse-into-python-for-network-engineers","title":"A Crashcourse into Python for Network Engineers","text":""},{"location":"#absolute-beginner-the-basics","title":"Absolute Beginner (The Basics)","text":"<ul> <li>A. Python Syntax &amp; Basics<ul> <li>[[A1. My first Python application]]</li> <li>[[A2. Variable Scopes]]</li> <li>[[A3. Understanding indentation, comments, and PEP 8 style guide]]</li> </ul> </li> <li>B. Data Types &amp; Variables<ul> <li>[[B1. Integers, floats, strings, booleans]]</li> <li>Type conversion (<code>int()</code>, <code>str()</code>, <code>float()</code>, <code>bool()</code>)</li> </ul> </li> <li>C. Operators<ul> <li>Arithmetic (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>)</li> <li>Comparison (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>)</li> <li>Logical (<code>and</code>, <code>or</code>, <code>not</code>)</li> </ul> </li> <li>D. Control Flow<ul> <li><code>if</code>, <code>elif</code>, <code>else</code> statements</li> <li>Loops: <code>for</code>, <code>while</code></li> <li><code>break</code>, <code>continue</code>, <code>pass</code></li> </ul> </li> <li>E. Functions<ul> <li>Defining functions (<code>def my_function()</code>)</li> <li>Function arguments and return values</li> <li>Default parameters, keyword arguments</li> <li>Forcing function calls to use args or kwargs: <code>*</code>,<code>/</code> </li> </ul> </li> <li>F. Basic Data Structures<ul> <li>Lists (<code>list.append()</code>, <code>list.pop()</code>, slicing)</li> <li>Tuples (immutable sequences)</li> <li>Dictionaries (<code>dict.keys()</code>, <code>dict.values()</code>)</li> <li>Sets (<code>set.add()</code>, <code>set.remove()</code>)</li> </ul> </li> </ul>"},{"location":"#final-chapter-exercises","title":"Final Chapter Exercises","text":"<ul> <li> <p>Create a function that accepts an IP address and returns the numerical (base-10) value as a single integer.</p> </li> <li> <p>Create a function that takes an IP address and returns the class of IP address (i.e. A, B, C etc.)</p> <ul> <li>Hint: you can use the function you previously created above as an aid.</li> </ul> </li> <li> <p>Create a simple CLI that continuously asks for an IP address and prints the IP address class.</p> <ul> <li>Hint: use <code>input()</code><ul> <li>Does the function <code>input</code> take any arguments? What does its signature look like?</li> </ul> </li> <li>Extra assingment: Make the app crash by entering the wrong input, and then implement input sanitation/validation so the app can't be crashed by entering any wrong input.<ul> <li>Did you get it right? Try your best to crash the app by.</li> </ul> </li> </ul> </li> <li> <p>Now make it so that when the user enters a valid IP address, the program calls the windows (cmd) ping command and prints the output to the CLI and then goes back to the CLI you wrote, so that a user can use your CLI as a special ping-tool.</p> <ul> <li>Hint: use <code>subprocess</code></li> </ul> </li> </ul>"},{"location":"#intermediate-building-proficiency","title":"Intermediate (Building Proficiency)","text":"<ul> <li>Advanced Data Structures<ul> <li>Nested lists and dicts</li> <li>Deque (<code>collections.deque</code>)</li> <li>DefaultDict (<code>collections.defaultdict</code>)</li> </ul> </li> <li>String Manipulation<ul> <li>String formatting (<code>f-strings</code>, <code>.format()</code>)</li> <li>String methods (<code>.split()</code>, <code>.join()</code>, <code>.replace()</code>, regex)</li> </ul> </li> <li>File Handling<ul> <li>Reading &amp; writing files (<code>open()</code>, <code>with</code> statement)</li> <li>JSON and CSV parsing (<code>json</code>, <code>csv</code> modules)</li> </ul> </li> <li>Exception Handling<ul> <li><code>try</code>, <code>except</code>, <code>finally</code>, <code>raise</code></li> <li>Custom exceptions</li> </ul> </li> <li>List Comprehensions &amp; Generators<ul> <li><code>[x**2 for x in range(10)]</code></li> <li>Generator functions (<code>yield</code>)</li> </ul> </li> <li>Lambda Functions &amp; Functional Programming<ul> <li><code>map()</code>, <code>filter()</code>, <code>reduce()</code></li> <li><code>lambda</code> expressions</li> </ul> </li> <li>Modules &amp; Packages<ul> <li><code>import</code>, <code>from module import</code></li> <li>Creating and using modules</li> <li>Virtual environments (<code>venv</code>)</li> </ul> </li> </ul>"},{"location":"#advanced-mastery-level","title":"Advanced (Mastery Level)","text":"<ul> <li>Object-Oriented Programming (OOP)<ul> <li>Classes, Objects</li> <li>Inheritance, Polymorphism, Encapsulation</li> <li>Dunder (<code>__init__</code>, <code>__str__</code>, <code>__repr__</code>)</li> <li>Abstract classes (<code>ABC</code> module)</li> </ul> </li> <li>Concurrency &amp; Parallelism<ul> <li>Multithreading (<code>threading</code> module)</li> <li>Multiprocessing (<code>multiprocessing</code> module)</li> <li>Async programming (<code>asyncio</code>, <code>await</code>, <code>async</code>)</li> </ul> </li> <li>Metaprogramming<ul> <li>Decorators (<code>@staticmethod</code>, <code>@classmethod</code>, custom decorators)</li> <li>Metaclasses (<code>type</code>, <code>__new__</code>)</li> </ul> </li> <li>Networking &amp; Sockets<ul> <li><code>socket</code> programming (TCP/UDP)</li> <li><code>asyncio</code> for networking</li> </ul> </li> <li>Regular Expressions<ul> <li><code>re</code> module for pattern matching</li> </ul> </li> <li>Databases &amp; ORMs<ul> <li>SQLite, PostgreSQL, MySQL (<code>sqlite3</code>, <code>psycopg2</code>, <code>SQLAlchemy</code>)</li> <li>ORMs like Django ORM, SQLAlchemy</li> </ul> </li> <li>Unit Testing &amp; Test-Driven Development (TDD)<ul> <li><code>unittest</code> module</li> <li><code>pytest</code></li> <li>Mocking (<code>unittest.mock</code>)</li> </ul> </li> <li>Logging &amp; Debugging<ul> <li><code>logging</code> module (<code>log.debug()</code>, <code>log.info()</code>, <code>log.warning()</code>)</li> <li>Debugging (<code>pdb</code>, <code>breakpoints()</code>)</li> </ul> </li> <li>Working with APIs<ul> <li><code>requests</code>, <code>http.client</code></li> <li>RESTful API consumption (<code>requests.get()</code>, <code>requests.post()</code>)</li> </ul> </li> </ul>"},{"location":"#expert-deep-dive-into-specializations","title":"Expert (Deep Dive into Specializations)","text":"<ul> <li>Design Patterns in Python<ul> <li>Singleton, Factory, Observer, Decorator patterns</li> </ul> </li> <li>Advanced Algorithms &amp; Data Structures<ul> <li>Graphs (<code>networkx</code>)</li> <li>Trees (Binary Trees, BST)</li> <li>Dynamic Programming</li> <li>Sorting &amp; Searching (<code>heapq</code>, <code>bisect</code>)</li> </ul> </li> <li>Performance Optimization<ul> <li>Profiling (<code>cProfile</code>, <code>line_profiler</code>)</li> <li>Memory management (<code>gc</code>, <code>sys.getsizeof()</code>)</li> <li>Cython, Numba, PyPy for performance boost</li> </ul> </li> <li>Security &amp; Cryptography<ul> <li>Hashing (<code>hashlib</code>, <code>bcrypt</code>)</li> <li>Encryption (<code>pycryptodome</code>, <code>cryptography</code>)</li> <li>Secure coding practices</li> </ul> </li> <li>Building CLI Tools<ul> <li><code>argparse</code>, <code>click</code></li> <li>Creating command-line utilities</li> </ul> </li> <li>Web Development<ul> <li>Flask &amp; Django frameworks</li> <li>WebSockets (<code>websockets</code>, <code>socket.io</code>)</li> </ul> </li> <li>Machine Learning &amp; AI<ul> <li><code>numpy</code>, <code>pandas</code>, <code>scikit-learn</code>, <code>tensorflow</code></li> <li>Deep Learning models</li> </ul> </li> <li>DevOps &amp; Automation<ul> <li>Docker, Kubernetes</li> <li>CI/CD pipelines</li> <li>Infrastructure as Code (<code>Ansible</code>, <code>Terraform</code>)</li> </ul> </li> <li>Low-Level Python &amp; C Extensions<ul> <li><code>ctypes</code>, <code>Cython</code></li> <li>Interfacing with C/C++ code</li> </ul> </li> <li>Distributed Systems &amp; P2P Networks<ul> <li><code>zmq</code>, <code>grpc</code></li> <li>Building decentralized applications</li> </ul> </li> </ul>"},{"location":"getting_started/getting_familiar_with_pycharm/","title":"PyCharm","text":""},{"location":"getting_started/getting_familiar_with_pycharm/#pycharm-overview","title":"PyCharm Overview","text":"<p>Lets explore PyCharm briefly before we continue, there are serveral important windows that you will eventually familiarize yourself with. Right now I will go over them very briefly. </p> <ul> <li>Project (blue)</li> <li>Structure (white)</li> <li>Terminal (purple)</li> <li>Python Console (orange)</li> <li>Code Editor (red)</li> </ul>"},{"location":"getting_started/git_crashcourse/","title":"Git Crashcourse","text":"<p>Absolutely, Tobias! Here's a very brief Git crash course, written in Markdown, ready to drop directly into your MkDocs <code>docs/git-crashcourse.md</code> file.</p>"},{"location":"getting_started/git_crashcourse/#docsgit-crashcoursemd","title":"<code>docs/git-crashcourse.md</code>","text":"<pre><code># \ud83d\ude80 Git Crash Course\n\nA lightning-fast intro to **Git** for beginners or rusty engineers.\n\n---\n\n## \ud83d\udce6 Initialize a Repository\n\n```bash\ngit init\n</code></pre> <p>Starts a new Git repository in the current folder.</p>"},{"location":"getting_started/git_crashcourse/#stage-commit-changes","title":"\u2795 Stage &amp; Commit Changes","text":"<pre><code>git add file.py        # Stage a file\ngit commit -m \"Message\"  # Commit with message\n</code></pre> <p>Use <code>.</code> to stage everything: <code>git add .</code></p>"},{"location":"getting_started/git_crashcourse/#check-status","title":"\ud83d\udd0d Check Status","text":"<pre><code>git status\n</code></pre> <p>Shows staged/unstaged files and branch info.</p>"},{"location":"getting_started/git_crashcourse/#view-commit-history","title":"\ud83d\udcdc View Commit History","text":"<pre><code>git log --oneline\n</code></pre> <p>Short view of recent commits.</p>"},{"location":"getting_started/git_crashcourse/#undo-changes","title":"\ud83d\udd01 Undo Changes","text":"<pre><code>git restore file.py         # Discard local changes\ngit reset HEAD file.py      # Unstage a file\ngit revert &lt;commit&gt;         # Create a new commit that reverts a change\n</code></pre>"},{"location":"getting_started/git_crashcourse/#remote-repositories","title":"\ud83c\udf10 Remote Repositories","text":"<pre><code>git clone &lt;repo-url&gt;\ngit remote add origin &lt;url&gt;\ngit push -u origin main\n</code></pre> <p>Connect to and push to GitHub or another remote.</p>"},{"location":"getting_started/git_crashcourse/#pull-latest-changes","title":"\ud83d\udd04 Pull Latest Changes","text":"<pre><code>git pull\n</code></pre> <p>Sync your local repo with the remote.</p>"},{"location":"getting_started/git_crashcourse/#branching","title":"\ud83d\udee0\ufe0f Branching","text":"<pre><code>git branch feature-x\ngit checkout feature-x\n# or in one command\ngit switch -c feature-x\n</code></pre> <p>Use branches to isolate features or fixes.</p>"},{"location":"getting_started/git_crashcourse/#merge-branches","title":"\ud83d\udce2 Merge Branches","text":"<pre><code>git checkout main\ngit merge feature-x\n</code></pre> <p>Merges feature branch into <code>main</code>.</p>"},{"location":"getting_started/git_crashcourse/#delete-branch","title":"\ud83d\udca5 Delete Branch","text":"<pre><code>git branch -d feature-x\n</code></pre> <p>Deletes a local branch after it's merged.</p>"},{"location":"getting_started/git_crashcourse/#summary-cheat-sheet","title":"\u2705 Summary Cheat Sheet","text":"Command Purpose <code>git init</code> Initialize repo <code>git add .</code> Stage all changes <code>git commit -m \"msg\"</code> Commit changes <code>git status</code> Check state <code>git log --oneline</code> View commit history <code>git clone &lt;url&gt;</code> Clone remote repo <code>git pull</code> / <code>git push</code> Sync with remote <code>git branch</code> / <code>switch</code> Manage branches <code>git merge</code> Merge changes <p>\ud83d\udcd8 Use Git daily. Commit often. Push deliberately.</p>"},{"location":"getting_started/git_crashcourse/#git-workflow-diagram","title":"\ud83d\udd01 Git Workflow Diagram","text":"<pre><code>flowchart TD\n    A[Working Directory] --&gt;|git add| B[Staging Area]\n    B --&gt;|git commit| C[Local Repository]\n    C --&gt;|git push| D[Remote Repository]\n\n    D --&gt;|git clone / git pull| A\n    C --&gt;|git log| E[History]\n    A --&gt;|git status| F[Status Check]\n    A --&gt;|git diff| G[Compare Changes]</code></pre> <p>This diagram shows the basic Git workflow and commands that connect each stage.</p>"},{"location":"getting_started/git_crashcourse/#git","title":"Git","text":"<p>Blockquotes in this document cite Atlassian's Git Tutorials. This document is a condensed version of their tutorials on Git.</p>"},{"location":"getting_started/git_crashcourse/#configuring-git","title":"Configuring Git","text":"<p><pre><code>git config [ &lt;nil&gt; |--local | --global | --system] [user.name | user.email | alias.alias-name &lt;git-command&gt;]\n</code></pre> Open the global configuration file in a text editor for manual editing. <pre><code>git config --global --edit\n</code></pre></p>"},{"location":"getting_started/git_crashcourse/#configuration-files","title":"Configuration Files","text":"<p>Git stores configuration options in three separate files, which lets you scope options to individual repositories, users, or the entire system:</p> <ul> <li>/.git/config \u2013 Repository-specific settings.</li> <li>~/.gitconfig \u2013 User-specific settings. This is where options set with the --global flag are stored.</li> <li>$(prefix)/etc/gitconfig \u2013 System-wide settings</li> </ul> <p>When options in these files conflict, local settings override user settings, which override system-wide. If you open any of these files, you\u2019ll see something like the following:</p>"},{"location":"getting_started/git_crashcourse/#git-add","title":"Git Add","text":"<p><code>git add</code> adds files from the working tree to the staging area which can then be comitted.</p> <p><code>git add &lt;directory|file&gt;</code></p> <p><code>git add -p # begin an interactive staging session</code></p> <p>This will present you with a chunk of changes and prompt you for a command. - Use y to stage the chunk - n to ignore the chunk - s to split it into smaller chunks - e to manually edit the chunk - q to exit.`</p>"},{"location":"getting_started/git_crashcourse/#removing-staged-content","title":"Removing Staged Content","text":"<p>Use <code>git restore --staged &lt;filename|directory&gt;</code> Use <code>git reset HEAD &lt;file&gt;</code></p>"},{"location":"getting_started/git_crashcourse/#git-commit","title":"Git Commit","text":"<p>Git doesn't require commit messages to follow any specific formatting constraints, but the canonical format is to summarize the entire commit on the first line in less than 50 characters, leave a blank line, then a detailed explanation of what\u2019s been changed.</p> <p>It is a common practice to use the first line of the commit message as a subject line, similar to an email. The rest of the log message is considered the body and used to communicate details of the commit change set. Note that many developers also like to use the present tense in their commit messages. This makes them read more like actions on the repository, which makes many of the history-rewriting operations more intuitive.</p> <ul> <li><code>git commit</code></li> <li><code>git commit -m \"msg\"</code></li> <li><code>git commit --no-verify -m \"msg\"</code></li> <li><code>git commit -am \"msg\"</code></li> <li><code>git commit --amend</code></li> </ul>"},{"location":"getting_started/git_crashcourse/#amending-a-commit","title":"Amending a Commit","text":"<pre><code>git add hello.py\ngit commit --amend\n</code></pre>"},{"location":"getting_started/git_crashcourse/#git-status","title":"Git Status","text":"<p>Used to explore the state of the working directory and the staging area prior to comitting - lists which files are staged, unstaged, and untracked.</p> <p>Use: <code>git status</code></p>"},{"location":"getting_started/git_crashcourse/#git-log","title":"Git Log","text":"<p>The git log command is Git's basic tool for exploring a repository\u2019s history. It\u2019s what you use when you need to find a specific version of a project or figure out what changes will be introduced by merging in a feature branch.</p> <p>The <code>~</code> character is useful for making relative references to the parent of a commit. For example, <code>3157e~1</code> refers to the commit before <code>3157e</code>, and <code>HEAD~3</code> is the great-grandparent of the current commit.</p> <p><code>git log --pretty=oneline</code> or <code>git log --online</code></p> <p><code>git log --pretty=format:'%h %an %ad %s'</code></p> <p>Use: <code>git log --branches=*</code> to view commits from all branches.</p> <p><code>git log --stat</code></p> <p><code>git log -p</code></p> <p><code>git log --author=\"&lt;authors-handle&gt;\"</code></p> <p><code>git log --grep=\"&lt;search-pattern&gt;\"</code></p> <p>Use: <code>git log -S \"piece of code to search for\"</code> to search for commits containing a string or piece of code.</p> <p>Use: <code>git log &lt;since&gt;..&lt;until&gt;</code> to only show commits that occur between the two arguments. Arguments can be either commit ID, a branch name or any other kind of revision reference</p> <p>Use: <code>git log &lt;file&gt;</code> to only show commits that include the specified file.</p> <p><code>git log --graph --decorate --oneline</code></p> <p>Keep in mind, many of theese can be combined, e.g. <code>git log --author=\"manjana\" --grep=\"something\"</code></p>"},{"location":"getting_started/git_crashcourse/#git-diff","title":"Git Diff","text":"<p><code>git diff</code> command is often used along with <code>git status</code> and <code>git log</code> to analyze the current state of a Git repo.</p> <p><code>git diff --color-words</code> to show coloration of the diff</p> <p>Invoking <code>git diff</code> without a file path will compare changes across the entire repository.</p> <p><code>git diff HEAD ./path/to/file</code> is equivalent to <code>git diff ./path/to/file</code> and diffs the file against the index and thus shows changes in the working tree that aren't staged yet.</p> <p>When git diff is invoked with the <code>--cached</code>/<code>--staged</code> option the diff will compare the staged changes with the local repository.</p> <p>git diff can be passed Git refs to commits to diff. Some example refs are, HEAD, tags, and branch names. Every commit in Git has a commit ID which you can get when you execute GIT LOG. You can also pass this commit ID to git diff.</p>"},{"location":"getting_started/git_crashcourse/#comparing-a-file-across-branches","title":"Comparing a File Across Branches","text":"<p>To compare a specific file across branches, pass in the path of the file as the third argument to git diff</p> <p><code>git diff main_branch feature_branch ./src/diff_test.py</code></p>"},{"location":"getting_started/git_crashcourse/#git-stash","title":"Git Stash","text":"<p>The stash is local to your Git repository; stashes are not transferred to the server when you push.</p> <p>The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then temporarily removes them from your working copy.</p> <p>To save local changes to the stash: <code>git stash</code> To retrieve the stash: <code>git stash pop</code></p> <p>By default Git won't stash changes made to untracked or ignored files.</p>"},{"location":"getting_started/git_crashcourse/#viewing-stashs-files","title":"Viewing Stash's Files","text":"<ul> <li>Use: <code>git stash show</code> to view a summary of the stash</li> <li>Use: <code>git stash show -p</code> to view the full diff of a stash</li> </ul>"},{"location":"getting_started/git_crashcourse/#stashing-untrackedignored-files","title":"Stashing Untracked/Ignored Files","text":"<p>To add untracked files, simply append <code>-u</code> or <code>--include-untracked</code> to <code>git stash</code> You can include changes to ignored files as well by passing the <code>-a</code> option (or <code>--all</code>) when running git stash.</p>"},{"location":"getting_started/git_crashcourse/#working-with-multiple-stashes","title":"Working With Multiple Stashes","text":"<ul> <li>To list all stashes: <code>git stash list</code></li> <li>To save the stash with an ID message: <code>git stash save \"message\"</code> which will show \\&lt;message&gt; when using <code>git stash list</code></li> <li>By default, git stash pop will re-apply the most recently created stash: <code>stash@{0}</code> - use <code>git stash list</code> to identify which stash you wish to pop.</li> <li>To pop specific stash number 2: <code>git stash pop stash@{2}</code></li> <li>To delete a stash: <code>git stash drop stash@{N}</code></li> </ul>"},{"location":"getting_started/git_crashcourse/#partial-stashes","title":"Partial Stashes","text":"<ul> <li>You can choose to stash:</li> <li>just a single file</li> <li>a collection of files</li> <li>individual changes from within files (\"hunks\")</li> </ul> <p>Use: <code>git stash --patch</code> (or <code>-p</code>) to iterate through each changed hunk in your working copy and use the commands below as replies for each hunk. (Use ^-C to abort process) <pre><code>Command     Description\n/           search for a hunk by regex\n?           help\nn           don't stash this hunk\nq           quit (any hunks that have already been selected will be stashed)\ns           split this hunk into smaller hunks\ny           stash this hunk\n</code></pre></p>"},{"location":"getting_started/git_crashcourse/#branch-a-stash","title":"Branch a Stash","text":"<p>If the changes on your branch diverge from the changes in your stash, you may run into conflicts when popping or applying your stash. Instead, you can use git stash branch to create a new branch to apply your stashed changes to: <code>git stash branch new-branch stash@{N}</code></p>"},{"location":"getting_started/git_crashcourse/#gitignore","title":".gitignore","text":"<p>Git sees every file in your working copy as either: - tracked (previously staged or comitted) - untracked (not staged or comitted) - ignored (an excluded file based on the patterns in <code>.gitignore</code> file.</p> <p>The <code>.gitignore</code> file uses globbing patterns to match file names.</p> Pattern Example matches Explanation* <code>**/logs</code> <code>logs/debug.log</code> <code>logs/monday/foo.bar</code> <code>build/logs/debug.log</code>  You can prepend a pattern with a double asterisk to match directories anywhere in the repository.  <code>**/logs/debug.log</code> <code>logs/debug.log</code> <code>build/logs/debug.log</code> but not <code>logs/build/debug.log</code>  You can also use a double asterisk to match files based on their name and the name of their parent directory.  <code>*.log</code> <code>debug.log</code> <code>foo.log</code> <code>.log</code> <code>logs/debug.log</code>  An asterisk is a wildcard that matches zero or more characters.  <code>*.log</code> <code>!important.log</code> <code>debug.log</code> <code>trace.log</code> but not <code>important.log</code> <code>logs/important.log</code>  Prepending an exclamation mark to a pattern negates it. If a file matches a pattern, but also matches a negating pattern defined later in the file, it will not be ignored.  <code>*.log</code> <code>!important/*.log</code> <code>trace.*</code> <code>debug.log</code> <code>important/trace.log</code> but not <code>important/debug.log</code>  Patterns defined after a negating pattern will re-ignore any previously negated files.  <code>/debug.log</code> <code>debug.log</code> but not <code>logs/debug.log</code>  Prepending a slash matches files only in the repository root.  <code>debug.log</code> <code>debug.log</code> <code>logs/debug.log</code>  By default, patterns match files in any directory  <code>debug?.log</code> <code>debug0.log</code> <code>debugg.log</code> but not <code>debug10.log</code>  A question mark matches exactly one character.  <code>debug[0-9].log</code> <code>debug0.log</code> <code>debug1.log</code> but not <code>debug10.log</code>  Square brackets can also be used to match a single character from a specified range.  <code>debug[01].log</code> <code>debug0.log</code> <code>debug1.log</code> but not  <code>debug2.log</code> <code>debug01.log</code>  Square brackets match a single character form the specified set.  <code>debug[!01].log</code> <code>debug2.log</code> but not <code>debug0.log</code> <code>debug1.log</code> <code>debug01.log</code>  An exclamation mark can be used to match any character except one from the specified set.  <code>debug[a-z].log</code> <code>debuga.log</code> <code>debugb.log</code> but not <code>debug1.log</code>  Ranges can be numeric or alphabetic.  <code>logs</code> <code>logs</code> <code>logs/debug.log</code> <code>logs/latest/foo.bar</code> <code>build/logs</code> <code>build/logs/debug.log</code>  If you don't append a slash, the pattern will match both files and the contents of directories with that name. In the example matches on the left, both directories and files named logs are ignored   logs/  <code>logs/debug.log</code> <code>logs/latest/foo.bar</code> <code>build/logs/foo.bar</code> <code>build/logs/latest/debug.log</code>  Appending a slash indicates the pattern is a directory. The entire contents of any directory in the repository matching that name \u2013 including all of its files and subdirectories \u2013 will be ignored  <code>logs/</code> <code>!logs/important.log</code> <code>logs/debug.log</code> <code>logs/important.log</code>  Wait a minute! Shouldn't <code>logs/important.log</code> be negated in the example on the left Nope! Due to a performance-related quirk in Git, you can not negate a file that is ignored due to a pattern matching a directory  <code>logs/**/debug.log</code> <code>logs/debug.log</code> <code>logs/monday/debug.log</code> <code>logs/monday/pm/debug.log</code>  A double asterisk matches zero or more directories.  <code>logs/*day/debug.log</code> <code>logs/monday/debug.log</code> <code>logs/tuesday/debug.log</code> but not <code>logs/latest/debug.log</code>  Wildcards can be used in directory names as well.  <code>logs/debug.log</code> <code>logs/debug.log</code> but not <code>debug.log</code> <code>build/logs/debug.log</code>  Patterns specifying a file in a particular directory are relative to the repository root. (You can prepend a slash if you like, but it doesn't do anything special.)"},{"location":"getting_started/git_crashcourse/#local-ignore-rules","title":"Local Ignore Rules","text":"<p>You can also define personal ignore patterns for a particular repository in a special file at .git/info/exclude. These are not versioned, and not distributed  with your repository, so it's an appropriate place to include patterns that will likely only benefit you. For example if you have a custom logging setup, or special development tools that produce files in your repository's working directory, you could consider adding them to .git/info/exclude to prevent them from being accidentally committed to your repository.</p>"},{"location":"getting_started/git_crashcourse/#debugging","title":"Debugging","text":"<p>Use: <code>git check-ignore --verbose ignored-file.log</code> to track down which <code>.gitignore</code> file has the rule for ignoring this file.</p>"},{"location":"getting_started/git_crashcourse/#git-tags","title":"Git Tags","text":""},{"location":"getting_started/git_crashcourse/#creating-tags","title":"Creating Tags","text":"<p>Use: <code>git tag -a \"v1.2.3b\" &lt;commit-hash&gt;</code> to create an annotated tag on the commit referenced with a hash.</p> <p>In the event that you must update an existing tag, the -f FORCE option must be used.</p>"},{"location":"getting_started/git_crashcourse/#deleting-tags","title":"Deleting Tags","text":"<p>Use: <code>git tag -d &lt;git-tag-name&gt;</code> to delete a tag.</p>"},{"location":"getting_started/git_crashcourse/#types-of-tags","title":"Types of Tags","text":"<p>Use: <code>git tag &lt;tagname&gt;</code> to create a lightweight tag     Lightweight tags are essentially 'bookmarks' to a commit, they are just a name and a pointer to a commit, useful for creating quick links to relevant commits.</p> <p>Use: <code>git tag -a &lt;tagname&gt;</code> to create an annotated tag.     Annotated tags are stored as full objects in the Git database. To reiterate, They store extra meta data such as: the tagger name, email, and date. Similar to commits and commit messages Annotated tags have a tagging message. Additionally, for security, annotated tags can be signed and verified with GNU Privacy Guard (GPG). Suggested best practices for git tagging is to prefer annotated tags over lightweight so you can have all the associated meta-data.</p>"},{"location":"getting_started/git_crashcourse/#listing-tags","title":"Listing Tags","text":"<p>Use: <code>git tag</code> to list all tags Use: <code>git tag -l *-rc*</code> to refine the list so you get every tag that contains <code>-rc</code> at any place in the tag name.</p>"},{"location":"getting_started/git_crashcourse/#checkout-tag","title":"Checkout Tag","text":"<p>Use: <code>git checkout &lt;name-of-tag&gt;</code></p> <p>This puts the repo in a detached <code>HEAD</code> state. This means any changes made will not update the tag. They will create a new detached commit. This new detached commit will not be part of any branch and will only be reachable directly by the commits SHA hash. Therefore it is a best practice to create a new branch anytime you're making changes in a detached <code>HEAD</code> state.</p>"},{"location":"getting_started/git_crashcourse/#git-blame","title":"Git Blame","text":"<p>This section only touches slightly on the topic of <code>git blame</code>. It's a more advanced topic that I'll not go deep into</p> <p>The git blame command is used to examine the contents of a file line by line and see when each line was last modified and who the author of the modifications was.</p> <p>The git blame command is a versatile troubleshooting utility that has extensive usage options. The high-level function of git blame is the display of author metadata attached to specific committed lines in a file. This is used to examine specific points of a file's history and get context as to who the last author was that modified the line. This is used to explore the history of specific code and answer questions about what, how, and why the code was added to a repository.</p>"},{"location":"getting_started/git_crashcourse/#git-checkout","title":"Git Checkout","text":"<p><code>git checkout &lt;commit-hash&gt;</code></p> <p><code>git checkout &lt;branch&gt;</code></p> <p>If you checkout a commit, do some changes and then checkout the main branch again (for example), you can then do \u00b4git revert<code>or</code>git reset`to undo any undesired changes you made.</p> <p>Checking out a specific commit will put the repo in a \"detached HEAD\" state. This means you are no longer working on any branch. In a detached state, any new commits you make will be orphaned when you change branches back to an established branch. Orphaned commits are up for deletion by Git's garbage collector. The garbage collector runs on a configured interval and permanently destroys orphaned commits. To prevent orphaned commits from being garbage collected, we need to ensure we are on a branch.</p>"},{"location":"getting_started/git_crashcourse/#git-revert","title":"Git Revert","text":"<p>The git revert command is a forward-moving undo operation that offers a safe method of undoing changes.</p> <p>git revert is able to target an individual commit at an arbitrary point in the history</p> <p>Use: <code>git revert HEAD</code> to create a new commit that's the inverse of the last commit (i.e. it cancels the latest commit)</p> <p>The preferred method of undoing shared history is git revert. A revert is safer than a reset because it will not remove any commits from a shared history. A revert will retain the commits you want to undo and create a new commit that inverts the undesired commit. This method is safer for shared remote collaboration because a remote developer can then pull the branch and receive the new revert commit which undoes the undesired commit.</p>"},{"location":"getting_started/git_crashcourse/#git-reset","title":"Git Reset","text":"<p>The git reset command is a complex and versatile tool for undoing changes. It has three primary forms of invocation. These forms correspond to command line arguments --soft, --mixed, --hard. The three arguments each correspond to Git's three internal state management mechanism's, The Commit Tree (HEAD), The Staging Index, and The Working Directory.</p> <p><code>git reset</code> should generally be considered a local undo method.</p> <p>Use: <code>git reset --hard &lt;commit-hash&gt;</code> to reset the history to include (up to) that specified commit</p> <p><code>git reset</code> is primarily used to undo the staging index changes.</p> <p><code>git reset --mixed</code> will move any pending changes from the staging index back into the working directory.</p> <p>Doing a reset is great for local changes however it adds complications when working with a shared remote repository. If we have a shared remote repository that has the deleted commit pushed to it, and we try to git push a branch where we have reset the history, Git will catch this and throw an error. Git will assume that the branch being pushed is not up to date because of it's missing commits. In these scenarios, git revert should be the preferred undo method.</p>"},{"location":"getting_started/git_crashcourse/#git-clean","title":"Git Clean","text":"<p>The <code>git clean</code> command operates on untracked files.</p> <p>When fully executed, git clean will make a hard filesystem deletion</p> <p>By default <code>git clean</code> requires a force-flag <code>-f</code> to run - this is a security mechanism.</p> <p>By default git clean will not operate recursively on directories. This is another safety mechanism to prevent accidental permanent deletion.</p> <p>Use: <code>git clean -n</code> to perform a dry-run.</p> <p>Use the <code>-d</code> flag to include directories. By default git clean will ignore directories</p> <p>Use the <code>-x</code> option to tell git clean to also include any ignored files (useful for cleaning build-files).</p> <p>Use the <code>-i</code> option to start an interactive session. E.g.: <code>git clean -idx</code></p>"},{"location":"getting_started/introduction/","title":"Introduction","text":""},{"location":"getting_started/introduction/#installing-python","title":"Installing Python","text":"<p>Go to Python's Official Website and navigate into version 3.13.2 by clicking here and download and install Windows 64-bit installer under the files section.</p>"},{"location":"getting_started/introduction/#installing-an-ide","title":"Installing an IDE","text":"<p>Go this website and download and install PyCharm Community Edition</p>"},{"location":"getting_started/introduction/#setup-a-bare-bones-python-application-in-pycharm","title":"Setup a bare-bones Python Application in PyCharm","text":"<p>Then open PyCharm and create a new Pure Python project and create a new file named main.py.</p> <p>Note</p> <p>This automatically sets up a Python virtual environment using <code>virtualenv</code> which is a superset of <code>venv</code> and has to be downloaded besides Python (PyCharm handles this for you). If you click the caret you have the option to use a bunch of other virtual environment tools. </p> <p></p> <p>Write the following inside the file:</p> main.py<pre><code>print(\"Hello World!\")\n</code></pre> <p>Open up the terminal and type <code>python main.py</code> and press enter.</p>"},{"location":"getting_started/introduction/#global-scope-code","title":"Global-scope Code","text":"<p>By default, Python allows you to type code directly into a file and run it, you won't get an error for that - but you won't get a high grade either!</p> <p>Here I've written a function for looking up saved SSIDs (and their stored passwords) on Windows computers. The example illustrates how Python is called without using a main-function as an entry point. This method has serious issues though, and we'll explore this further in the coming chapter.</p> <p>Special print function</p> <p>If you look closely you will see we are using a function called <code>pprint</code>, that is not a typo, it is a function very similar to Pythons built-in <code>print</code> function, except it pretty-prints the content of the variable it is wrapping. Using <code>pprint</code> is often useful when debugging and troubleshooting because it allows you to quickly inspect the contents of complex datastructures.</p> ssid_snitch.py<pre><code>import platform\nimport subprocess\nfrom pprint import pprint\nfrom typing import Any, Dict\n\n\ndef get_ssid_store() -&gt; Dict[Any, Any]:\n    \"\"\"  \n    Reads all saved WLAN profiles for the user running this script,\n    and returns a mapping of `ssid:ssid_password` for each stored WLAN profile found.\n    \"\"\"\n    if not platform.uname().system.lower() == \"windows\":\n        raise OSError(\"Requires the Windows operating system\")\n    ssid_pw_map: Dict[Any, Any] = {}\n    data = subprocess.check_output([\"netsh\", \"wlan\", \"show\", \"profiles\"]).decode(\"utf-8\").split(\"\\n\")\n    profiles = [i.split(\":\")[1][1:-1] for i in data if \"All User Profile\" in i]\n    for ssid in profiles:\n        results = (\n            subprocess.check_output([\"netsh\", \"wlan\", \"show\", \"profiles\", ssid, \"key=clear\"])\n            .decode(\"utf-8\")\n            .split(\"\\n\")\n        )\n        results = [b.split(\":\")[1][1:-1] for b in results if \"Key Content\" in b]\n        try:\n            ssid_pw_map.setdefault(ssid, results[0])\n        except IndexError:\n            ssid_pw_map.setdefault(ssid, \"N/A\")\n    return ssid_pw_map\n\n\npprint(get_ssid_store())\nprint(\"Any Python is valid here!\")\n</code></pre>"},{"location":"getting_started/pep8_overview/","title":"PEP8","text":""},{"location":"getting_started/pep8_overview/#pep-8-summary-python-style-guide","title":"PEP 8 Summary: Python Style Guide","text":"<p>PEP 8 is Python\u2019s official style guide that provides conventions for writing clean, readable, and consistent code. It helps improve code maintainability and collaboration. Below is a concise summary of its key points:</p>"},{"location":"getting_started/pep8_overview/#1-code-layout","title":"1. Code Layout","text":"<ul> <li>Indentation: Use 4 spaces per indentation level (no tabs).<ul> <li>This is only true if you're not using a modern IDE - modern IDEs like PyCharm or vscode converts tabs to spaces automatically under   the hood.</li> </ul> </li> <li>Line length: Limit lines to 79 characters (72 for docstrings).<ul> <li>This is more of a practical guideline rooted in the fact that with 79 characters the code is perfectly readable in old terminal   emulators.</li> </ul> </li> <li>Blank lines:<ul> <li>Separate top-level functions and class definitions with two blank lines.</li> <li>Use one blank line to separate methods within a class.</li> <li>Most IDE's have either automatic linters that enforces this on save or shortcuts that handles this (Alt+Shift+L in PyCharm for   example)</li> </ul> </li> <li>Imports:<ul> <li>Place imports at the top of the file.</li> <li>Use one import per line.</li> <li>Follow the order:<ol> <li>Standard library imports</li> <li>Third-party imports</li> <li>Local application imports</li> </ol> </li> </ul> </li> </ul>"},{"location":"getting_started/pep8_overview/#2-naming-conventions","title":"2. Naming Conventions","text":"<ul> <li>Variables &amp; Functions: <code>snake_case</code> (e.g., <code>calculate_total_price</code>)</li> <li>Classes: <code>PascalCase</code> (e.g., <code>ApiAuthenticator</code>)</li> <li>Constants: <code>UPPER_CASE_WITH_UNDERSCORES</code></li> <li>Private methods or attributes: Prefix with an underscore (<code>_protected_method</code>, <code>__private_method</code>)</li> <li>Avoid:<ul> <li>Names that shadow built-in functions (<code>list</code>, <code>dict</code>, <code>id</code>).</li> <li>Single-character names, except for counters (such as <code>i</code>, <code>j</code> in loops).<ul> <li>Generally - no single-character variable names.</li> </ul> </li> </ul> </li> </ul>"},{"location":"getting_started/pep8_overview/#3-whitespace-usage","title":"3. Whitespace Usage","text":"<ul> <li>Around Operators:<ul> <li>\u2705 <code>x = a + b</code></li> <li>\u274c <code>x=a+b</code></li> </ul> </li> <li>Inside Brackets &amp; Parentheses:<ul> <li>\u2705 <code>my_list = [1, 2, 3]</code></li> <li>\u274c <code>my_list = [ 1,2,3 ]</code></li> </ul> </li> <li>After Commas:<ul> <li>\u2705 <code>func(a, b, c)</code></li> <li>\u274c <code>func(a,b,c)</code></li> </ul> </li> </ul>"},{"location":"getting_started/pep8_overview/#4-comments-docstrings","title":"4. Comments &amp; Docstrings","text":"<ul> <li>Use comments sparingly and make them meaningful.</li> <li>Inline comments: Place at least two spaces before <code>#</code>:</li> </ul> <pre><code>x = 42  # This is an example of using two spaces after your code before placing a comment.\n</code></pre> <ul> <li>Block comments: Explain complex logic above the code block.</li> </ul> <pre><code># Check if the user has the required permissions before proceeding.\n# If the user is an admin, allow full access; otherwise, restrict actions.\nif user.is_admin:\n    grant_full_access()\nelse:\n    restrict_access()\n</code></pre> <ul> <li>Docstrings:<ul> <li>Used for modules, functions, classes, methods.</li> <li>Use triple-double quotes:</li> </ul> </li> </ul> <p><pre><code>def multiply_numbers(param1, param2):\n    \"\"\"\n    Compute the sum of two numbers.\n\n    This function takes two numerical parameters and returns their sum.\n    It does not perform any type checking, so ensure the inputs are valid numbers.\n\n    Args:\n        param1 (int or float): The first number.\n        param2 (int or float): The second number.\n\n    Returns:\n        int or float: The sum of param1 and param2.\n    \"\"\"\n    return param1 * param2\n</code></pre> Real world example - not strict doc-strings but more useful for objects IMO. <pre><code>class SshUtils:  \n    def __init__(self, profile_folder, descriptive_name: str = None, keyfile_name=\"id_rsa\", passphrase=None):\n        \"\"\"  \n        Creates an SSH key-pair inside playbooks/profile folder with name `key_name`.pub for public, and\n        `key_name` for private.  \n\n        Usage example:\n        ssh_utils = SshUtils(profile_folder=\"test_profile\", key_name=\"id_rsa\", passphrase=\"Password1234!\")        \n        ssh_utils.create_ssh_key_pair(key_bits=4096)\n        print(ssh_utils.read_public_key())  \n\n        Passphrase is optional and can be omitted.\n        \"\"\"\n        self.key_dir = os.path.expanduser(PathManager().active_profile_dir / \".ssh\")\n        self.key_name = keyfile_name\n        self.descriptive_name = descriptive_name\n        self.passphrase = passphrase\n        self.priv_key_path = Path(self.key_dir).joinpath(self.key_name)\n        self.pub_key_path = self.priv_key_path.with_suffix(\".pub\")\n</code></pre></p>"},{"location":"getting_started/pep8_overview/#5-best-practices","title":"5. Best Practices","text":"<ul> <li>Boolean Comparisons:<ul> <li>\u2705 <code>if is_valid:</code></li> <li>\u274c <code>if is_valid == True:</code></li> </ul> </li> <li>Avoid Mutable Defaults:</li> </ul> <pre><code># Bad \ndef append_to_list(value, my_list=[]):\n    my_list.append(value)\n    return my_list\n\n\n# Good\ndef append_to_list(value, my_list=None):\n    if my_list is None:\n        my_list = []\n    my_list.append(value)\n    return my_list\n    `\n</code></pre> <ul> <li>Use <code>is</code> for <code>None</code> comparisons:<ul> <li>\u2705 <code>if x is None:</code></li> <li>\u274c <code>if x == None:</code></li> </ul> </li> <li>Use <code>with</code> for file handling:<ul> <li>the <code>with</code> imperative is a context-manager in Python and automatically handles closing the file handle so you don't accidentially   drown your system with open file handles.<ul> <li>The lesson: always use context-managers when you have the option, they're a great safeguard and makes your code more pythonic!</li> </ul> </li> </ul> </li> </ul> <pre><code>with open(\"file.txt\", \"r\") as f:\n    content = f.read()\n</code></pre>"},{"location":"getting_started/pep8_overview/#6-object-oriented-programming-oop","title":"6. Object-Oriented Programming (OOP)","text":"<ul> <li>Class methods should use <code>@classmethod</code> and <code>@staticmethod</code> decorators where applicable.</li> <li>Use <code>self</code> for instance methods and <code>cls</code> for class methods.</li> <li>Keep class attributes private (<code>_attr</code> or <code>__attr</code>).</li> </ul>"},{"location":"getting_started/pep8_overview/#7-exceptions-error-handling","title":"7. Exceptions &amp; Error Handling","text":"<ul> <li>Use exceptions instead of returning error codes:</li> </ul> <pre><code>try:\n    result = 10 / x\nexcept ZeroDivisionError as e:\n    print(f\"Error: {e}\")\n    `\n</code></pre> <ul> <li>Use specific exception types (avoid catching <code>Exception</code> unless necessary).<ul> <li><code>Exception</code> is the base-class that all other exceptions inherit from in Python, this means that it will catch any exception - this is   rarely what you wan't and will give you a lot of headaches!</li> </ul> </li> </ul>"},{"location":"getting_started/pep8_overview/#8-string-formatting","title":"8. String Formatting","text":"<ul> <li>Prefer f-strings (Python 3.6+):</li> </ul> <pre><code>name = \"Alice\"\nprint(f\"Hello, {name}!\")\n`\n\nimport math\n\nprint(f\"Pi is approximately {math.pi:0.99})  # Prints Pi with 99 decimal points.\n      &gt;&gt; &gt; \"Pi is approximately 3.141592653589793115997963468544185161590576171875\"\n</code></pre> <ul> <li>Avoid <code>+</code> for string concatenation.<ul> <li>Don't do: <code>\"Pi is a mathematical constant defined as \" + str(math.pi) + \". It's apprixmiately equal to 3.14\"</code></li> </ul> </li> </ul> <p>The old way is to use <code>\"this is a string\".format(name)</code>. It is only useful under very specific scenarious and with f-strings, you can do a lot of really neat stuff.</p>"},{"location":"getting_started/pep8_overview/#conclusion","title":"Conclusion","text":"<p>Following PEP 8 ensures clean, consistent, and professional Python code. Many tools like <code>flake8</code>, <code>black</code>, and <code>pylint</code> help enforce PEP 8 automatically, but for some things it's necessary that you make it a practice to always follow the standard</p> <p>This goes for things like proper casing of variables, functions and classes and indentation (whitespace) for example, while other things like line length (which are inherited from the widths of classic terminal emulators) are somewhat more flexible and then again you have string formatting where there are exceptions to the rule and then on the other hand we have stuff like import order which can be automated with tools like <code>isort</code> which are similar in nature to <code>black</code> and <code>flake8</code>.</p> <p>So in summary - following PEP8 makes your code cleaner which in turn makes it more readable for other people - code is foremost meant to be read by people and only secondarily read by computers - if that was not true, we would still be using machine language, but we're not machines, we're humans, so we write clean code.</p>"},{"location":"getting_started/pep8_overview/#exercises","title":"Exercises","text":"<p>No exercises, but try to return to this chapter once in a while and refresh your memory on different topics every now and then.</p>"},{"location":"getting_started/scope_rules_in_python/","title":"Scoping","text":""},{"location":"getting_started/scope_rules_in_python/#python-scoping-understanding-legb-rule-scope-types","title":"Python Scoping: Understanding LEGB Rule &amp; Scope Types","text":"<p>In Python, scoping determines how variables are searched and accessed in different parts of a program. Python uses the LEGB rule ( Local, Enclosing, Global, Built-in) to resolve variable names.</p> <p>Note</p> <p>You don't have to memorize the LEGB rule, as you write more and more Python you'll come to know it intuitively - but for now, read this   chapter through and try to understand as much of it as possible, and then later on return to it and re-read the main takeways a few times   and do some experimentation whenever in doubt.</p> <p>Scoping is fundamentally about where a variable is accessible in a program. When you declare a variable, not all parts of your code can see or modify it - that is determined by the scope of the variable.</p> <p>Scoping answers the following question:</p> <p>\"I have data or logic stored in this variable, but I need to access it somewhere else \u2013 can I access it directly, or do I need to pass it explicitly?\"</p> <p>This leads to different strategies based on where the variable is declared and where it needs to be used. Depending on the situation, you might need to:</p> <ul> <li>Pass it as a function argument</li> <li>Store it as an instance variable in a class</li> <li>Use closures for state retention</li> <li>Use <code>global</code> or <code>nonlocal</code> (sparingly)</li> </ul> <p>Most often you'll use the first two and more rarely the third and very rarely the fourth method.</p>"},{"location":"getting_started/scope_rules_in_python/#the-four-scope-levels-legb-rule","title":"The Four Scope Levels (LEGB Rule)","text":"<p>Python follows a hierarchy when looking up variables:</p> <ol> <li>Local (L): Inside the current function (or <code>lambda</code>). ! (1)</li> <li>Enclosing (E): Inside any outer function (if using nested functions).</li> <li>Global (G): Defined at the top level of a module or file.</li> <li> <p>Built-in (B): Predefined Python names like <code>len()</code>, <code>print()</code>, <code>range()</code>.</p> </li> <li> <p>Don't worry about lambdas for now - they're an advanced feature that is pretty cool and has some application to them, but rarely used for    the most part.</p> </li> </ol> <p>Python searches for a variable in this order: Local \u2192 Enclosing \u2192 Global \u2192 Built-in</p> <p>If the variable isn't found, Python raises a <code>NameError</code>.</p>"},{"location":"getting_started/scope_rules_in_python/#1-local-scope","title":"1. Local Scope","text":"<p>A variable defined inside a function is local to that function.</p> <pre><code>def my_function():\n    x = 10  # Local scope\n    print(x)\n\n\nmy_function()\n# print(x)  # \u274c NameError: x is not defined (because it's local to my_function)\n</code></pre> <p>We'll get to exceptions later.</p>"},{"location":"getting_started/scope_rules_in_python/#2-enclosing-scope-nested-functions","title":"2. Enclosing Scope (Nested Functions)","text":"<p>If a variable isn't found in local scope, Python checks enclosing functions.</p> <pre><code>def outer():\n    y = 20  # Enclosing scope\n\n    def inner():\n        print(y)  # Can access y from enclosing function\n\n    inner()\n\n\nouter()\n</code></pre> <ul> <li><code>inner()</code> can access <code>y</code> because <code>y</code> is in the enclosing function <code>outer()</code>.  </li> <li>But inner functions can't modify enclosing variables unless explicitly declared with <code>nonlocal</code>.</li> </ul>"},{"location":"getting_started/scope_rules_in_python/#modifying-an-enclosing-variable-with-nonlocal","title":"Modifying an Enclosing Variable with <code>nonlocal</code>","text":"<pre><code>def outer():\n    y = 20  # Enclosing scope\n\n    def inner():\n        nonlocal y  # Declaring y as nonlocal\n        y += 10\n        print(y)\n\n    inner()\n    print(y)  # Modified in enclosing scope\n\n\nouter()\n</code></pre> <ul> <li>Without <code>nonlocal</code>, <code>y += 10</code> would create a new local variable instead of modifying the enclosing <code>y</code>.</li> </ul>"},{"location":"getting_started/scope_rules_in_python/#3-global-scope","title":"3. Global Scope","text":"<p>Variables defined outside functions are global and accessible everywhere except when modified inside a function (unless declared <code>global</code>).</p> <pre><code>z = 30  # Global scope\n\n\ndef my_function():\n    print(z)  # Access global variable\n\n\nmy_function()\nprint(z)  # Still accessible globally\n</code></pre> <p>Global variables can be accessed inside functions but not modified unless declared <code>global</code>.</p>"},{"location":"getting_started/scope_rules_in_python/#modifying-a-global-variable-with-global","title":"Modifying a Global Variable with <code>**global**</code>","text":"<pre><code>counter = 0  # Global scope\n\n\ndef increment():\n    global counter  # Declaring counter as global\n    counter += 1  # Now modifying the global variable\n\n\nincrement()\nprint(counter)  # Output: 1\n</code></pre> <ul> <li>Without <code>global</code>, <code>counter += 1</code> would create a new local variable, leaving the global <code>counter</code> unchanged.</li> </ul> <p>This is purely for demonstration - using <code>global</code> is usually bad practice and is often considered a code smell. In multithreaded programs it can cause deadlocks and it makes debugging and software testing harder and results in code that is harder to reason about and understand (see also: spaghetti code).</p>"},{"location":"getting_started/scope_rules_in_python/#4-built-in-scope","title":"4. Built-in Scope","text":"<p>Python has predefined functions and keywords that exist in the built-in scope.</p> <pre><code>print(len(\"Python\"))  # Both print` `len` is in built-in scope.\n</code></pre> <ul> <li>These are always available from anywhere in your code, without you having to do anything! - Unless you override them, aka. shadow them (which is bad practice).</li> </ul> <p>Note</p> <p>Python has a few built-ins that you have to be mindful about, such as <code>id</code>, <code>range</code>, <code>hash</code> and <code>input</code> for example, which you will inevitably stumble upon at sometime. Be mindful not to shadow them.</p>"},{"location":"getting_started/scope_rules_in_python/#overriding-a-built-in-function-not-recommended","title":"Overriding a Built-in Function (Not Recommended)","text":"<pre><code>def len(x):  # Overriding built-in function\n    return \"Oops!\"\n\n\nprint(len(\"Python\"))  # Prints: \"Oops!\" instead of \"6\"\n</code></pre> <p>Avoid naming variables/functions the same as built-in ones to prevent unexpected behavior (this phenomenon, when done, is called <code>shadowing</code>).</p>"},{"location":"getting_started/scope_rules_in_python/#exercises","title":"Exercises","text":"<p>TODO</p>"},{"location":"getting_started/the_main_issue/","title":"The <code>Main</code> Issue","text":"<p>In this section we will explore the unintended side-effects that arises when main-functions are omitted.</p>"},{"location":"getting_started/the_main_issue/#the-issue-with-not-using-a-main-function","title":"The issue with not using a main-function","text":"<p>So far we have learned that you can write Python code directly in a file and execute with Python, but that is not the proper way to do it because it will most certainly lead to unintended side effects if your program ever grows sufficiently. The problem arises when you will later on be writing modules which you import (and call) from other Python files.</p> <p>Instead you should do it like this:</p> <pre><code>def my_logic():\n    # Execute some logic\n    pass\n\nif __name__ == '__main__':\n    print(\"executing my logic\")\n    my_logic()\n</code></pre> <p>Doing it this way is correct and will not cause any of the code to ever be executed when importing the function <code>my_logic</code> into another. Alas, it gives you control over the code you execute - while writing Python without the <code>if __name__ == '__main__':</code> clause will always execute that code whenever you import the file it is contained in, into another file.</p> <p>Both methods are equally run by typing <code>python main.py</code> in the terminal (assuming the filename is identical for the purpose of the explanation).</p>"},{"location":"getting_started/the_main_issue/#furhter-illustration","title":"Furhter illustration","text":"<p>Below we have a file - let's give it some name, say: sniffer.py sniffer.py<pre><code>import time\n\n\ndef get_epoch_timestamp():\n    \"\"\"Returns the current epoch timestamp in seconds.\"\"\"\n    return int(time.time())  # Convert float to int for whole seconds\n\n\nprint(\"[X] Setting up my l33t sniffing tool\")\nconfigure_scapy()\nshutdown_os_ports()\nsetup_evasion()\nintercepter = NetworkSniffer(interface=\"enet01\").listen_from_attached_network_hub()\nprint(\"[X] Setup completed - intercepter initialized on enet01 interface\")\n\nwhile True:\n    print(\"[X] Listening for and intercepting traffic\")\n    intercepter.listen(save_to=f\"intercepted_traffic__{get_epoch_timestamp()}.pcap\")\n</code></pre></p>"},{"location":"getting_started/the_main_issue/#the-problem","title":"The problem!","text":"<p>Now we have another file where we wish to use the <code>get_epoch_timestamp()</code> from earlier: <pre><code>import sniffer # imports sniffer.py\n\nif __name__ == '__main__': # (1)\n    print(\"The current epoch timestamp is: {sniffer.get_epoch_timestamp()}\")  # (2)\n</code></pre></p> <ol> <li>\u26a0\ufe0f The fact that we are using a main-function here, doesn't prevent the error that is about to happen.</li> <li>\u2139\ufe0f This is an f-string, you'll learn about those later - for now it's sufficient to know that f-strings lets you call functions and retrieve their return values inside of strings. Now what do you think will happend when we run this new file, which additionally has a main-function?</li> </ol> <p>If we inspect the print statements we will see the following thing happending: <pre><code>&gt;&gt;&gt; [X] Setting up my l33t sniffing tool\n&gt;&gt;&gt; [X] Setup completed - intercepter initialized on enet01 interface\n</code></pre></p> <p>Danger</p> <p>And from thereon the program will hang indefinitely because it's stuck in the while loop from <code>sniffer.py</code> - but don't mistake that for the actual issue. The real issue is that we wished only to use the <code>get_epoch_timestamp()</code> function in our new file, but instead we ran all the code inside of <code>sniffer.py</code> which in this case just co-incidentally caused us to be stuck in a while loop.</p> <p>Alas, aim to never write Python code directly inside a Python file unless you're just testing stuff out. But even then, you can avoid this entire thing by just typing <code>if __name__ == '__main__:</code> and voila, you won't ever have any issues.</p>"},{"location":"getting_started/virtual_environments/","title":"Comparison","text":"<p>For fresh projects you have two options in 2025, <code>venv</code> or <code>Poetry</code>. What to use depends on the project you are going for as <code>Poetry</code> can do a lot more than <code>venv</code> does.</p> <p>Both aim to solve Python environment isolation, but Poetry is a higher-level tool (1) that also handles package management, dependency resolution, and publishing whereas <code>venv</code> only handles the Python environment.</p> <ol> <li>Higher-level tool refers to how much functionality is abstracted away or automated for the user.</li> </ol>"},{"location":"getting_started/virtual_environments/#what-is-venv","title":"What Is <code>venv</code>?","text":"<p>The purpose of <code>venv</code> is to create isolated Python environments. Which have the following benefits: - Prevents dependency conflicts between projects - Allows you to have multiple Python versions or library sets side-by-side</p> <p>However, it doesn't handle dependency resolution \u2014 you still use <code>pip</code> + <code>requirements.txt</code></p>"},{"location":"getting_started/virtual_environments/#typical-usage","title":"Typical Usage","text":"<pre><code>python -m venv .venv\nsource .venv/bin/activate\npip install requests\npip install black\n</code></pre> <p>You manage packages manually and freeze (lock their versions) with: <pre><code>pip freeze &gt; requirements.txt\n</code></pre></p>"},{"location":"getting_started/virtual_environments/#what-is-poetry","title":"What Is <code>poetry</code>?","text":"<p>The purpose of <code>poetry</code> is also to create isolated Python environments, but it does a bunch more than just this - it's basically an End-to-end Python project management tool, which accomplishes the following:</p> <ul> <li>Creates virtual environments (like <code>venv</code>)</li> <li>Manages dependencies via <code>pyproject.toml</code> (instead of <code>requirements.txt</code>)</li> <li>Resolves dependency trees (like <code>pip-tools</code>, but built-in)</li> <li>Can build and publish packages to PyPI or private registries</li> <li>Better reproducibility with <code>poetry.lock</code></li> </ul>"},{"location":"getting_started/virtual_environments/#typical-usage_1","title":"Typical Usage:","text":"<pre><code>poetry new myproject\ncd myproject\npoetry add requests\npoetry add black --group dev\npoetry run python script.py\n</code></pre> <p>It automatically creates and uses its own isolated virtual environment (unless you tell it not to).</p>"},{"location":"getting_started/virtual_environments/#key-differences","title":"Key Differences","text":"Feature <code>venv</code> <code>poetry</code> Creates virtual environments \u2705 \u2705 Manages dependencies \u274c (you use pip manually) \u2705 Resolves dependency versions \u274c \u2705 Generates lock file \u274c \u2705 (<code>poetry.lock</code>) Package publishing \u274c \u2705 Uses <code>pyproject.toml</code> \u274c \u2705 Dev dependencies separation \u274c (not built-in) \u2705 (<code>--group dev</code>) Reproducible builds \u274c \u2705 Interactive CLI commands \u274c \u2705 (like <code>poetry shell</code>, <code>poetry run</code>)"},{"location":"getting_started/virtual_environments/#so-are-they-similar","title":"So, Are They Similar?","text":"<p>Yes, but with a big distinction:</p> <p><code>venv</code> is only about isolation and is built into Python - you don't need to install anything. <code>Poetry</code> is a full project toolchain manager (including isolation) and has to bee installed seperately from Python.</p>"},{"location":"getting_started/virtual_environments/#when-to-use-either","title":"When to use either?","text":"Situation Use This Simple script or project, or ad hoc work <code>venv</code> Building an application, library, or internal tool <code>poetry</code> Need lock files, dev dependencies, publishing <code>poetry</code>"},{"location":"python_advanced/introduction/","title":"Introduction","text":""},{"location":"python_advanced/introduction/#python-advanced","title":"Python Advanced","text":""},{"location":"python_beginner/elementary_datatypes/","title":"Understanding <code>int()</code>","text":"<p>This tutorial introduces integers (<code>int</code>) in Python, a fundamental data type you'll use frequently in networking scripts, automation, and calculations.</p>"},{"location":"python_beginner/elementary_datatypes/#integers-in-python","title":"\ud83d\udccc Integers in Python","text":"<pre><code>if __name__ == '__main__':  \n    \"\"\" \n    Integers (`int`) are one of the most fundamental datatypes in Python.\n    You'll work with them *a lot*. They are simple in nature and form the \n    starting point for understanding Python's datatypes.\n    \"\"\"\n\n    # Basic integer assignment\n    this_is_an_int = 256  \n    this_is_also_an_int = int(256)  # These two are equivalent.\n\n    # Initializing an integer to zero using `int()`\n    this_just_initializes_to_the_number_zero = int()  \n    print(this_just_initializes_to_the_number_zero)  # Output: 0  \n\n    # Strings and type conversion\n    this_is_not_an_int_its_a_string = \"256\"  \n    but_with_type_conversion_we_can_turn_it_into_an_int = int(this_is_not_an_int_its_a_string)  # Converts to an integer\n\n    # Comparison of integer creation methods\n    if this_is_an_int == this_is_also_an_int:  \n        print('Takeaway: You can create integers using direct assignment or int(). '\n              'Additionally, `int()` can perform type conversions, as demonstrated with `int(\"256\")`.')  \n\n    # int() can also convert binary strings into their decimal equivalents\n    for bits in range(8, 32, 8):  \n        \"\"\"\n        This for-loop runs three times:\n        - First iteration: bits = 8\n        - Second iteration: bits = 16\n        - Third iteration: bits = 32\n\n        The range() function works as:\n        range(start, stop, step)\n        - You can specify only `start`, or `start` and `stop`, or all three.\n        \"\"\"\n\n        val = int(\"1\" * bits, 2)  # Creates a binary string (e.g., \"11111111\") and converts it to decimal\n        print(val)  \n\n        # The second argument in int() (here: 2) defines the base.\n        # Try reasoning about the output in your head before running the script!\n</code></pre>"},{"location":"python_beginner/elementary_datatypes/#exercises","title":"\ud83d\udcdd Exercises","text":"<p>These exercises will challenge your understanding of <code>int()</code> and <code>range()</code>.</p>"},{"location":"python_beginner/elementary_datatypes/#exercise-1-fun-with-negative-ranges","title":"Exercise 1: Fun with Negative Ranges","text":""},{"location":"python_beginner/elementary_datatypes/#steps","title":"Steps:","text":"<ol> <li>Create a main function.</li> <li>Inside the function, write a <code>for</code> loop using <code>range()</code>.<ul> <li>It should start at -15, end at -16, and decrease by 3 each time (<code>step = -3</code>).</li> </ul> </li> <li>Inside the loop, print the current integer.</li> <li>Run the script and predict what will happen.</li> <li>Compare the output with your expectation.</li> <li>Why did this happen? Play around with different values to find out!</li> </ol>"},{"location":"python_beginner/elementary_datatypes/#hints","title":"Hints:","text":"<pre><code>def main():\n    for num in range(-15, -16, -3):\n        print(num)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ul> <li>What happens when the range \"ends before it starts\"?</li> <li>Change <code>range(-15, -30, -3)</code>, then <code>range(-15, -10, -3)</code>, and observe.</li> </ul>"},{"location":"python_beginner/elementary_datatypes/#exercise-2-understanding-int","title":"Exercise 2: Understanding <code>int()</code>","text":""},{"location":"python_beginner/elementary_datatypes/#steps_1","title":"Steps:","text":"<ol> <li>Create a main function.</li> <li> <p>Create a string variable that holds <code>\"11\"</code>. Name it anything.</p> <pre><code>my_var = \"11\"\n</code></pre> </li> <li> <p>Create a new variable equal to the first one:</p> <pre><code>my_new_var = my_var\n</code></pre> </li> <li> <p>Print the new variable using the <code>print()</code> function:</p> <pre><code>print(my_new_var)  # Output: \"11\"\n</code></pre> </li> <li> <p>Now convert it into an integer using <code>int()</code>:</p> <pre><code>print(int(my_new_var, 10))  # Explicit base 10 conversion\n</code></pre> </li> <li> <p>Try removing <code>,10</code> and print again:</p> <pre><code>print(int(my_new_var))  # What happens?\n</code></pre> </li> <li> <p>Try changing <code>,10</code> to <code>,2</code> and print again:</p> <pre><code>print(int(my_new_var, 2))  # What happens?\n</code></pre> </li> <li> <p>Play around with different bases to deepen your understanding!</p> </li> </ol>"},{"location":"python_beginner/elementary_datatypes/#hints_1","title":"Hints:","text":"<ul> <li>What happens if <code>\"11\"</code> is interpreted as base-10?</li> <li>What happens if <code>\"11\"</code> is interpreted as base-2 (binary)?</li> <li>Try using different string values:<ul> <li><code>\"100\"</code> as base-2?</li> <li><code>\"A\"</code> as base-16?</li> </ul> </li> </ul>"},{"location":"python_beginner/elementary_datatypes/#takeaways","title":"\ud83c\udfaf Takeaways","text":"<p>\u2714 <code>int()</code> can initialize integers (<code>int()</code> \u2192 <code>0</code>). \u2714 <code>int()</code> can convert strings to numbers (<code>int(\"123\")</code> \u2192 <code>123</code>). \u2714 <code>int()</code> can convert binary, octal, and hexadecimal (<code>int(\"FF\", 16)</code> \u2192 <code>255</code>). \u2714 <code>range(start, stop, step)</code> lets you iterate over sequences dynamically.</p>"},{"location":"python_beginner/introduction/","title":"Introduction","text":""},{"location":"python_beginner/introduction/#python-basics","title":"Python Basics","text":""},{"location":"python_intermediate/introduction/","title":"Introduction","text":""},{"location":"python_intermediate/introduction/#python-intermediate","title":"Python Intermediate","text":""},{"location":"python_mastery/introduction/","title":"Introduction","text":""},{"location":"python_mastery/introduction/#python-mastery","title":"Python Mastery","text":""}]}